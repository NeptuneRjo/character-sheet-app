{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-9fb5ffb35d92d74d.js","src/CharacterConstants.js","src/Character5e.js","src/Storage.js","src/CharacterService.js","src/components/ConfirmButton.js","src/components/Modal.js","src/ActionMenu.js","src/ShortCutKeys.js","src/Tabs.js","src/views/SheetView.js","src/Manager.js","src/components/NoteListItem.js","src/components/NoteList.js","src/components/SimpleList.js","src/components/TableEditable.js","src/components/SkillListing.js","src/components/AttributeListing.js","src/components/EditableField.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/runtime-js/lib/runtime-6764fec3df828735.js","src/index.js","src/EventEmitter.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"bJatm\\\":\\\"index.4f3b95c5.js\\\",\\\"8uk0L\\\":\\\"service_worker.js\\\"}\"));","\n\n\n/**\n * Matching attribute full names to the character properties.\n */\nexport const attributes = Object.freeze({\n    STRENGTH: 'str',\n    DEXTERITY: 'dex',\n    CONSTITUTION: 'con',\n    INTELLIGENCE: 'intel',\n    WISDOM: 'wis',\n    CHARISMA: 'cha'\n});\n\n/**\n * Matching skills to attributes.\n */\nexport const skillAttributes = Object.freeze({\n    acrobatics: attributes.DEXTERITY,\n    animal_handling: attributes.WISDOM,\n    arcana: attributes.INTELLIGENCE,\n    athletics: attributes.STRENGTH,\n    deception: attributes.CHARISMA,\n    history: attributes.INTELLIGENCE,\n    insight: attributes.WISDOM,\n    intimidation: attributes.CHARISMA,\n    investigation: attributes.INTELLIGENCE,\n    medicine: attributes.WISDOM,\n    nature: attributes.INTELLIGENCE,\n    perception: attributes.WISDOM,\n    performance: attributes.CHARISMA,\n    persuasion: attributes.CHARISMA,\n    religion: attributes.INTELLIGENCE,\n    sleight_of_hand: attributes.DEXTERITY,\n    stealth: attributes.DEXTERITY,\n    survival: attributes.WISDOM\n});\n\n\nexport const skillLevels = Object.freeze({\n    UNSKILLED: 0,\n    PROFICIENT: 1,\n    EXPERT: 2\n });\n","/**\n * Model for 5e character data\n */\n\nimport { skillAttributes, skillLevels } from './CharacterConstants.js';\n\nexport default class Character5e {\n    /**\n     * Property notes...\n     * @prop {String} key Unique (in one instance of the app) id for the character. 7 Random letters/numbers.\n     * @prop {String} charname Name.\n     * @prop {Object} class_points Class point like ki, sorcerer points, etc.\n     * @prop {Number} class_points.cur\n     * @prop {Number} class_points.max\n     * @prop {Array[]} weapons Weapon data (name, att, dam, notes).\n     * @prop {String[]} features Special features and abilities.\n     * @prop {String[]} equipment Stuff the character carries.\n     * @prop {Array[]} notes_adv Adventure notes [header, text]\n     * @prop {Array[]} notes_cam Campaign notes [header, text]\n     * @prop {Array[]} npcs NPC notes [header, text]\n     * @prop {Array[]} factions NPC notes [header, text]\n     * @prop {String} key_prev If character was imported into app with identical key. This is that key and the character is given a new one on import.\n     * @prop {Object} skills Skill and its level. 0/1/2 (See skillLevels).\n     */\n    constructor ({\n        key = '',\n        charname = '',\n        charclass = '',\n        race = '',\n        background = '',\n        alignment = '',\n        level = 1,\n        experience = 0,\n        inspiration = '',\n        armor_class = '',\n        speed = 30,\n        hp_cur = '',\n        hp_max = '',\n        hd_cur = '',\n        hd_max = '',\n        deathSave = {\n            success: 0,\n            fail: 0\n        },\n        class_points = {\n            cur: 0,\n            max: 0\n        },\n        str = 10,\n        dex = 10,\n        con = 10,\n        intel = 10,\n        wis = 10,\n        cha = 10,\n        saves = {\n            str: 0,\n            dex: 0,\n            con: 0,\n            intel: 0,\n            wis: 0,\n            cha: 0\n        },\n        skills = {\n            acrobatics: 0,\n            animal_handling: 0,\n            arcana: 0,\n            athletics: 0,\n            deception: 0,\n            history: 0,\n            insight: 0,\n            intimidation: 0,\n            investigation: 0,\n            medicine: 0,\n            nature: 0,\n            perception: 0,\n            performance: 0,\n            persuasion: 0,\n            religion: 0,\n            sleight_of_hand: 0,\n            stealth: 0,\n            survival: 0\n        },\n        weapons = [],\n        proficiencies_other = '',\n        languages = '',\n        traits = '',\n        ideals = '',\n        bonds = '',\n        flaws = '',\n        appearance = '',\n        equipment = [],\n        cp = '',\n        sp = '',\n        gp = '',\n        pp = '',\n        features = [],\n        notes = '',\n        notes_adv = [],\n        notes_cam = [],\n        npcs = [],\n        factions = [],\n        partymembers = [],\n        spell_ability = '',\n        spell_save = '',\n        spell_attack = '',\n        spell_slots = {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n            6: 0,\n            7: 0,\n            8: 0,\n            9: 0\n        },\n        spell_slots_cur = {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n            6: 0,\n            7: 0,\n            8: 0,\n            9: 0\n        },\n        spells = {\n            0: [],\n            1: [],\n            2: [],\n            3: [],\n            4: [],\n            5: [],\n            6: [],\n            7: [],\n            8: [],\n            9: []\n        },\n        updated = '',\n        key_prev = ''\n    }) {\n        this.app = 'character-sheet-5e';\n        this.key = key;\n        this.charname = charname;\n        this.charclass = charclass;\n        this.race = race;\n        this.background = background;\n        this.alignment = alignment;\n        // use underscore so we can use getter/setters on level itself.\n        this._level = level;\n        this.experience = experience;\n        this.inspiration = inspiration;\n        this.armor_class = armor_class;\n        this.speed = speed;\n        this.hp_cur = hp_cur;\n        this.hp_max = hp_max;\n        this.hd_cur = hd_cur;\n        this.hd_max = hd_max;\n        this.deathSave = deathSave;\n        this.class_points = class_points;\n        this.str = str;\n        this.dex = dex;\n        this.con = con;\n        this.intel = intel;\n        this.wis = wis;\n        this.cha = cha;\n        this.saves = saves;\n        this.skills = skills;\n        // @version < 2.2.0 Backwards compatibile convert sleight_of_Hand to sleight_of_hand\n        if (typeof this.skills['sleight_of_Hand'] !== 'undefined') {\n            const sleight = this.skills['sleight_of_Hand'];\n            delete this.skills['sleight_of_Hand'];\n            this.skills['sleight_of_hand'] = sleight;\n        }\n\n        // @version < 1.8.0 Backwards compatible convert string to the text of a first list item.\n        if (!Array.isArray(weapons)) {\n            const lines = weapons.split(new RegExp('<br/?>', 'i'));\n            weapons = lines.map((el) => { return [el]; });\n        }\n        this.weapons = weapons;\n        this.proficiencies_other = proficiencies_other;\n        this.languages = languages;\n        this.traits = traits;\n        this.ideals = ideals;\n        this.bonds = bonds;\n        this.flaws = flaws;\n        this.appearance = appearance;\n        // @version < 1.8.0 Backwards compatible convert string to array\n        if (!Array.isArray(equipment)) {\n            equipment = equipment.split(new RegExp('<br/?>', 'i'));\n        }\n        this.equipment = equipment;\n        this.cp = cp;\n        this.sp = sp;\n        this.gp = gp;\n        this.pp = pp;\n        // @version < 1.8.0 Backwards compatible convert string to array\n        if (!Array.isArray(features)) {\n            features = features.split(new RegExp('<br/?>', 'i'));\n        }\n        this.features = features;\n        this.notes = notes;\n        // @version < 1.8.0 Backwards compatible convert string to the text of a first list item.\n        if (!Array.isArray(notes_adv)) {\n            notes_adv = [\n                ['', notes_adv]\n            ];\n        }\n        this.notes_adv = notes_adv;\n        // @version < 1.8.0 Backwards compatible convert string to the text of a first list item.\n        if (!Array.isArray(notes_cam)) {\n            notes_cam = [\n                ['', notes_cam]\n            ];\n        }\n        this.notes_cam = notes_cam;\n        this.npcs = npcs;\n        this.factions = factions;\n        this.partymembers = partymembers;\n        this.spell_ability = spell_ability;\n        this.spell_save = spell_save;\n        this.spell_attack = spell_attack;\n        this.spell_slots = spell_slots;\n        this.spell_slots_cur = spell_slots_cur;\n        this.spells = spells;\n        this.updated = updated;\n        this.key_prev = key_prev;\n\n        this.emitter = null;\n    }\n    /**\n     * Level getter.\n     * @returns {Number}\n     */\n    get level () {\n        return this._level;\n    }\n    /**\n     * Set level and trigger proficiency update if necessary.\n     * @param {Number}\n     */\n    set level (newVal) {\n        const cur = this.level;\n        if (newVal === cur) {\n            return;\n        }\n        const prof = this.proficiency;\n        this._level = newVal;\n        const newProf = this.proficiency;\n        if (prof === newProf) {\n            return;\n        }\n        if (this.emitter) {\n            this.emitter.trigger('character:proficiency:update');\n        }\n    }\n    /**\n     * A quick summary header for use in lists.\n     */\n    get summaryHeader () {\n        return `${this.charname} (${this.charclass} ${this.level})`;\n    }\n    /**\n     * Proficiency modifier as string.\n     * @returns {String}\n     */\n    get proficiency () {\n        const bonus = Math.ceil(this.level / 4) + 1;\n        return `+${bonus}`;\n    }\n    /**\n     * Set an attribute score.\n     * @param {String} attribute\n     * @param {Number} value\n     */\n    setAttribute (attribute, value) {\n        if (!this[attribute]) {\n            return;\n        }\n        const curVal = this[attribute];\n        if (curVal === value) {\n            return;\n        }\n        this[attribute] = value;\n        if (this.emitter) {\n            this.emitter.trigger('character:attribute:update', attribute);\n            // Update any relevant skill mods.\n            for (const skill in skillAttributes) {\n                if (skillAttributes[skill] === attribute) {\n                    this.emitter.trigger('character:skill:update', skill, this.getSkillMod(skill));\n                }\n            }\n        }\n    }\n    /**\n     * Get modifier for an attribute.\n     * @param {String} attribute Attribute short code\n     * @returns {String}\n     */\n    attributeMod (attribute) {\n        const score = this[attribute];\n        if (Number.isNaN(score)) {\n            return '0';\n        }\n        const raw = Math.floor((score - 10) / 2);\n        return (raw > 0) ? `+${raw}` : raw.toString();\n    }\n    /**\n     * Are they proficient in a skill.\n     * @param {String} skill\n     * @returns {Boolean}\n     */\n    isProficient (skill) {\n        return this.skills[skill] > skillLevels.UNSKILLED;\n    }\n    /**\n     * Are they expert in a skill.\n     * @param {String} skill\n     * @returns {Boolean}\n     */\n    isExpert (skill) {\n        return this.skills[skill] === skillLevels.EXPERT;\n    }\n    /**\n     * Get the modifier for a skill.\n     * @param {String} skill\n     * @returns {String}\n     */\n    getSkillMod (skill) {\n        let raw = 0;\n        const skillLevel = this.skills[skill];\n        if (typeof skillLevel === 'undefined') {\n            return 0;\n        }\n        const attribute = skillAttributes[skill];\n        if (attribute) {\n            raw += parseInt(this.attributeMod(attribute), 10);\n        }\n        const prof = parseInt(this.proficiency, 10);\n        if (this.isProficient(skill)) {\n            raw += prof;\n        }\n        if (this.isExpert(skill)) {\n            raw += prof;\n        }\n        return (raw > 0) ? `+${raw}` : raw.toString();\n    }\n    /**\n     * Get skill proficiency\n     * @param {String} skill\n     * @returns {Number}\n     */\n    getSkill (skill) {\n        const value = this.skills[skill];\n        if (typeof value === 'undefined') {\n            return null;\n        }\n        return value;\n    }\n    /**\n     * Set a skill proficiency.\n     * @param {String} skill\n     * @param {Number} newValue\n     */\n    setSkill (skill, newValue) {\n        const curValue = this.getSkill(skill);\n        if (curValue === null || curValue === newValue) {\n            return;\n        }\n        this.skills[skill] = newValue;\n        if (this.emitter) {\n            this.emitter.trigger('character:skill:update', skill, this.getSkillMod(skill));\n        }\n    }\n    /**\n     * Is the attribute save proficient.\n     * @param {String} attr\n     * @returns {Number}\n     */\n    isSaveProficient (attr) {\n        return (this.saves[attr] || 0);\n    }\n    /**\n     * Get the save modifier for an attribute.\n     * @param {String} attr\n     * @returns {String}\n     */\n    saveMod (attr) {\n        let profMod = 0;\n        if (this.isSaveProficient(attr)) {\n            profMod = parseInt(this.proficiency, 10);\n        }\n        const raw = 0 + profMod + parseInt(this.attributeMod(attr), 10);\n        return (raw > 0) ? `+${raw}` : raw.toString();\n    }\n    /**\n     * Set/unset a save proficiency.\n     * @param {String} attr\n     * @param {Number} checked\n     */\n    setSaveProficiency (attr, checked) {\n        const cur = this.saves[attr];\n        if (typeof cur === 'undefined') {\n            return;\n        }\n        if (cur === checked) {\n            return;\n        }\n        this.saves[attr] = (checked ? 1 : 0);\n        if (this.emitter) {\n            this.emitter.trigger('character:save:update', attr);\n        }\n    }\n    /**\n     * Converting _ props for saving.\n     * @returns {Object}\n     */\n    toJSON () {\n        const obj = {};\n        const props = Object.getOwnPropertyNames(this);\n        props.forEach((prop) => {\n            if (prop === 'emitter') {\n                return;\n            }\n            if (prop.substr(0, 1) === '_') {\n                obj[prop.substr(1)] = this[prop];\n            } else {\n                obj[prop] = this[prop];\n            }\n        });\n        return obj;\n    }\n};\n","/**\n * LocalStorage interface\n */\nconst Storage = {\n    /**\n     * A prefix to attack to the random keys to differentiate them from any other storage for the current location/domain\n     */\n    prefix: '',\n    /**\n     * Set the prefix\n     * @param {String} prefix string to prefix the randomly generated key\n     */\n    setPrefix: function (prefix) {\n        this.prefix = prefix;\n    },\n    /**\n     * Returns blank or the value for the key\n     * @param {String} key\n     * @return {Object|Null} object or null\n     */\n    get: function (key) {\n        let txt = localStorage.getItem(`${this.prefix}${key}`);\n        // backward compatibile cleanup later @todo\n        if (txt === null) {\n            txt = localStorage.getItem(key);\n            if (txt !== null) {\n                this.set(key, txt);\n            }\n        }\n        try {\n            return (txt !== null) ? JSON.parse(txt) : null;\n        } catch(e) {\n            return null;\n        }\n    },\n    /**\n     * Store a value for the key\n     * Warning: browsers vary for the amount of data you can store (usually ~5mb)\n     * @param {String} key\n     * @param {Object} object\n     * @return {Boolean} returns false on error\n     */\n    set: function (key, object) {\n        try {\n            localStorage.setItem(`${this.prefix}${key}`, JSON.stringify(object));\n            // backwards compatible cleanup for non prefixed saved characters @todo remove\n            if (localStorage.getItem(key) !== null) {\n                localStorage.removeItem(key);\n            }\n        } catch (e) {\n            // Should only happen when over quota\n            console.log(e.message);\n            return false;\n        }\n        return true;\n    },\n    /**\n     * Remove a key\n     * @param {String} key\n     * @return void\n     */\n    remove: function (key) {\n        localStorage.removeItem(`${this.prefix}${key}`);\n    },\n    /**\n     * Get an array of all keys with the key prefix\n     * @return {Array}\n     */\n    getAllKeys: function () {\n        const keys = [];\n        if (localStorage.length > 0) {\n            const key_regex = new RegExp(`^(${this.prefix})+`, 'i');\n            for (let i = 0; i < localStorage.length; i++) {\n                let key = localStorage.key(i);\n                // check for prefix\n                if (key.indexOf(this.prefix) !== 0) {\n                    // backwards compatibility for a little while @todo remove\n                    if (!key.match(/^[a-z0-9]{7}$/)) {\n                        continue;\n                    }\n                }\n                key = key.replace(key_regex, '');\n                keys.push(key);\n            }\n        }\n        return keys;\n    }\n};\n\nexport default Storage;\n","/**\n * Service for retrieving, saving, deleting characters.\n * For now LocalStorage only, but potentially adaptable to different stores.\n */\nimport Character5e from './Character5e.js';\nimport Storage from './Storage.js';\n\n/**\n * Return UTC datetime string for right now\n * @return {String}\n */\nconst currentTimestamp = function () {\n    const d = new Date();\n    return d.toUTCString();\n};\n/**\n * Get a unique 7 character key to use for a new character.\n * @returns {String}\n */\nconst generateCharacterKey = function() {\n    let key = (`${Math.random().toString(36)}00000000000000000`).slice(2, 9);\n    while (getCharacter(key) !== null) {\n        key = (`${Math.random().toString(36)}00000000000000000`).slice(2, 9);\n    }\n    return key;\n};\n/**\n * Return a new character for a key.\n * @param {String} key\n */\nconst newCharacter = function(key) {\n    return new Character5e({key: key});\n};\n/**\n * Get a single character model.\n * @param {String} key Character's key.\n * @returns {Character5e|null}\n */\nconst getCharacter = function (key) {\n    if (!key) {\n        return null;\n    }\n    const char_obj = Storage.get(key);\n    if (!char_obj || !char_obj.key) {\n        return null;\n    }\n    return new Character5e(char_obj);\n};\n/**\n * Save a single character.\n * @param {Character5e} character\n * @param {String} appname\n * @returns {Boolean}\n */\nconst saveCharacter = function (character, appname) {\n    // Update saved timestamp\n    character.updated = currentTimestamp();\n    // Make sure app name is set\n    character.app = appname;\n    return Storage.set(character.key, character);\n};\n/**\n * Remove a character from the store.\n * @param {String} key\n */\nconst removeCharacter = function (key) {\n    Storage.remove(key);\n};\n/**\n * Get all characters saved.\n * @returns {Character5e[]}\n */\nconst getAllCharacters = function() {\n    const characters = [];\n    Storage.getAllKeys().forEach((key) => {\n        const char_obj = Storage.get(key);\n        if (!char_obj || !char_obj.key) {\n            return;\n        }\n        characters.push(new Character5e(char_obj));\n    });\n    return characters;\n};\n/**\n * Count the number of characters in storage.\n */\nconst getCharacterCount = function() {\n    return getAllCharacters().length;\n};\n/**\n * Import/save a character from an obj and return the model.\n * @param {Object} char_obj Character data from backup (we hope).\n * @param {String} appname App identifier.\n * @returns {Character5e}\n * @throws {Error}\n */\nconst importCharacter = function(char_obj, appname) {\n    if (typeof char_obj !== 'object' || !char_obj.key || char_obj.app !== appname) {\n        throw new Error(`Data appears to be invalid. Try removing any text that isn't part of the backup (i.e. email introduction).`);\n    }\n    const newCharacter = new Character5e(char_obj);\n    // do we have this char key already\n    const existingCharacter = getCharacter(char_obj.key);\n    if (existingCharacter && existingCharacter.charname !== '' && existingCharacter.charname !== newCharacter.charname) {\n        // existing key but different name\n        if (!newCharacter.key_prev) {\n            newCharacter.key_prev = newCharacter.key;\n            newCharacter.key = generateCharacterKey();\n        } else {\n            const temp_key = newCharacter.key_prev;\n            newCharacter.key_prev = newCharacter.key;\n            newCharacter.key = temp_key;\n        }\n    }\n    saveCharacter(newCharacter);\n    return newCharacter;\n};\n/**\n * Set prefix for LocalStorage keys.\n * @param {String} prefix\n */\nconst setLocalStoragePrefix = function(prefix) {\n    if (!prefix) {\n        throw Error('LocalStorage prefix is empty.');\n    }\n    Storage.setPrefix(prefix);\n};\n\nexport {\n    generateCharacterKey,\n    newCharacter,\n    getCharacter,\n    saveCharacter,\n    removeCharacter,\n    getAllCharacters,\n    getCharacterCount,\n    importCharacter,\n    setLocalStoragePrefix\n};\n","// Confirmation button (i.e. \"Are you sure\" after first click.)\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n<style>\n    :host {\n        display: inline-block;\n        transition: background-color 500ms;\n    }\n    :host([data-triggered=\"false\"]) slot[name=\"default\"] {\n        display: inline;\n    }\n    :host([data-triggered=\"true\"]) slot[name=\"default\"] {\n        display: none;\n    }\n    :host([data-triggered=\"false\"]) slot[name=\"confirm\"] {\n        display: none;\n    }\n    :host([data-triggered=\"true\"]) slot[name=\"confirm\"] {\n        display: inline;\n    }\n</style>\n<slot name=\"default\"><span>Submit</span></slot>\n<slot name=\"confirm\"><span>Are you sure?</span></slot>\n`;\n\nclass ConfirmButton extends HTMLElement {\n    constructor () {\n        super();\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\n        this._wait = 3000;\n        // Default to not triggered\n        this._triggered = false;\n        // Default to asking for confirmation.\n        this._confirm = true;\n        // No default callback after confirmation.\n        this._confirmCallback = null;\n        this.shadowRoot.host.dataset.triggered = 'false';\n        // Accessible role\n        this.shadowRoot.host.setAttribute('role', 'button');\n    }\n    connectedCallback () {\n        // Add focus-ability if it has not already been set in the html.\n        if (this.shadowRoot.host.getAttribute('tabindex') === null) {\n            this.shadowRoot.host.setAttribute('tabindex', 0);\n        }\n        // click handler\n        this.addEventListener('click', this._handleClick);\n        // space/enter handler to simulate normal button\n        this.addEventListener('keydown', this._handleKeyDown);\n        this._wait = parseInt(this.shadowRoot.host.dataset.wait || 3000, 10);\n        // Allow for setting the confirm click feature to be disabled.\n        // Only set this here if the data attribute is explicitly set\n        // else it will overwrite the property set on the class directly.\n        if (this.shadowRoot.host.dataset.confirm !== undefined) {\n            this._confirm = !(this.shadowRoot.host.dataset.confirm === 'false');\n        }\n        // Unhide slotted content now that the button is loaded.\n        // CSS will handle this now based on data-triggered.\n        Array.from(this.children).forEach((slotted) => {\n            slotted.hidden = false;\n        });\n        if (this._confirmCallback) {\n            this.addEventListener('click', this._confirmCallback);\n        }\n    }\n    disconnectedCallback () {\n        this.removeEventListener('click', this._handleClick);\n        this.removeEventListener('keydown', this._handleKeyDown);\n        if (this._confirmCallback) {\n            this.removeEventListener('click', this._confirmCallback);\n        }\n    }\n    /**\n     * Update display when triggered value changes.\n     * @param {Boolean|String} value\n     */\n    set triggered (value) {\n        const newValue = !!value;\n        if (this._triggered === newValue) {\n            return;\n        }\n        this._triggered = newValue;\n        // Update data-triggered so the css changes what text is displayed.\n        if (this._triggered) {\n            this.shadowRoot.host.dataset.triggered = 'true';\n        } else {\n            this.shadowRoot.host.dataset.triggered = 'false';\n        }\n    }\n    get triggered () {\n        return this._triggered;\n    }\n    get confirm () {\n        return this._confirm;\n    }\n    /**\n     * Set if the confirm button/click should be used.\n     */\n    set confirm (value) {\n        this._confirm = !!value;\n    }\n\n    get confirmCallback () {\n        return this._confirmCallback;\n    }\n    /**\n     * Set confirm callback here if you need to set it _before_ putting the button in the DOM.\n     * This assures it is triggered after the default event handler.\n     */\n    set confirmCallback (func) {\n        if (typeof func === 'function') {\n            this._confirmCallback = func;\n        }\n    }\n    /**\n     * Clicking.\n     * @param {Event} ev Click event on element.\n     */\n    _handleClick (ev) {\n        if (!this.triggered && this._confirm) {\n            // stop any other events from happening\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            this.triggered = true;\n            // wait a bit then reset.\n            setTimeout(() => {\n                this.triggered = false;\n            }, this._wait);\n        }\n        // let any other events happen if triggered was true\n        // whatever other listeners have been added to the click.\n    }\n    /**\n     * Handle button or space to trigger.\n     * @param {KeyboardEvent} ev\n     */\n    _handleKeyDown (ev) {\n        if ((ev.key !== 'Enter' && ev.key !== ' ') || ev.shiftKey) {\n            return;\n        }\n        // Prevent things like space bar trigger scrolling while focused on the button.\n        ev.preventDefault();\n        this.shadowRoot.host.click();\n    }\n    /**\n     * Use to reset the button from external code.\n     */\n    reset () {\n        this.triggered = false;\n    }\n}\n\nwindow.customElements.define('confirm-button', ConfirmButton);\n\nexport default ConfirmButton;\n","/**\n * Modal.\n */\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n<style>\n    :host {\n        margin: 1rem auto;\n        padding: 1.5rem;\n        border: 2px solid rgb(207,0,15);\n        border-radius: 4px;\n        background-color: #fefefe;\n        box-shadow: 0 0 40px 10px rgba(0, 0, 0, 0.5);\n        width: auto;\n        z-index: 100;\n        position: absolute;\n        left: 50%;\n        transform: translateX(-50%);\n        min-width: 80%;\n        top: 2rem;\n    }\n    @media (min-width: 50.0rem) {\n        :host {\n            margin: 2rem auto;\n            padding: 1.5rem 3rem;\n            min-width: 40%;\n            max-width: 70rem;\n            left: 50%;\n            transform: translateX(-50%);\n        }\n    }\n    :host([hidden]) {\n        display: none\n    }\n    h2 {\n        font-weight: bold;\n        font-size: 1.25rem;\n        line-height: 1.75rem;\n        margin: 0rem 0 1.25rem 0;\n    }\n    /* Close button */\n    button.close {\n        float: right;\n        margin: 1rem 0 0 1rem;\n    }\n    form button.close {\n        float: none;\n        margin: 0 0 0 2rem;\n    }\n\n</style>\n<h2 id=\"modal-label\" tabindex=\"-1\"><slot name=\"header\"></slot></h2>\n<slot name=\"content\"></slot>\n `;\n\nclass Modal extends HTMLElement {\n    constructor () {\n        super();\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\n        this.shadowRoot.host.setAttribute('role', 'dialog');\n        this.shadowRoot.host.setAttribute('aria-labelledby', 'modal-label');\n\n        this.boundOutsideClickClose = function () {};\n        this.boundKeyboardEvents = function () {};\n        this.opener = null;\n    }\n\n    connectedCallback () {\n        this.addEventListener('click', this.handleCloseClick);\n    }\n\n    disconnectedCallback () {\n        this.removeEventListener('click', this.handleCloseClick);\n    }\n\n    get header () {\n        return this.shadowRoot.querySelector('slot[name=\"header\"]').innerHTML;\n    }\n    set header (html) {\n        this.shadowRoot.querySelector('slot[name=\"header\"]').innerHTML = html;\n    }\n    /**\n     * Is the modal open or not\n     */\n    get isOpen () {\n        return !this.shadowRoot.host.hidden;\n    }\n    /**\n     * Return a close button to use\n     * @returns {HTMLElement} button.close\n     */\n    getCloseButton () {\n        const button = document.createElement('button');\n        button.setAttribute('type', 'button');\n        button.classList.add('close');\n        button.textContent = 'Close';\n        button.setAttribute('slot', 'content');\n        return button;\n    }\n    /**\n     * Adapted from https://github.com/salesforce/kagekiri\n     * Get children of a node, including getting slotted content.\n     * @param {HTMLElement} node\n     * @returns HTMLCollection|HTMLElement[]\n     */\n    getChildren (node) {\n        // is it a slot.\n        if (typeof node.assignedElements === 'function') {\n            const assigned = node.assignedElements();\n            // slotted content or the default\n            return assigned.length ? assigned : node.children;\n        } else {\n            return node.children;\n        }\n    }\n    /**\n     * Is an element focusable.\n     * This probably doesn't cover ALL possibilities, but its a decent start.\n     * @param {HTMLElement} element\n     * @param {Boolean} keyboardOnly Are we only looking for tabbable focus.\n     */\n    isFocusable (element, keyboardOnly = false) {\n        const tagName = element.tagName;\n        // Just in case.\n        if (tagName === undefined) {\n            return false;\n        }\n        // Will be false-y if not set/available.\n        const disabled = element.disabled;\n        // Convert to integer or NaN if tabindex is not set.\n        const tabIndex = parseInt(element.getAttribute('tabindex'), 10);\n        const contentEditable = element.getAttribute('contenteditable');\n\n        switch (tagName) {\n            case 'INPUT':\n            case 'TEXTAREA':\n            case 'SELECT':\n            case 'BUTTON':\n            case 'A':\n                if (tabIndex === -1) {\n                    return false;\n                }\n                if (disabled) {\n                    return false;\n                }\n                if (tagName === 'A' && !element.href) {\n                    return false;\n                }\n                return true;\n            default:\n                if (keyboardOnly && tabIndex >= 0) {\n                    return true;\n                } else if (!keyboardOnly && tabIndex >= -1) {\n                    return true;\n                }\n                if (contentEditable === 'true') {\n                    return true;\n                }\n        }\n        return false;\n    }\n    /**\n     * Get focusable elements recursively.\n     * @param {HTMLElement} element\n     * @param {Boolean} keyboardOnly Only tabbable elements?\n     * @param {Boolean} single Only get the first one.\n     * @returns\n     */\n    getFocusableChildren (element, keyboardOnly = false, single = false) {\n        let focusables = [];\n        const children = Array.from(this.getChildren(element));\n        if (children.length === 0) {\n            return focusables;\n        }\n        for (const child of children) {\n            // check if element is focusable.\n            if (this.isFocusable(child, keyboardOnly)) {\n                focusables.push(child);\n                if (single) {\n                    return focusables;\n                }\n            }\n            const childFocusables = this.getFocusableChildren(child, keyboardOnly, single);\n            if (single && childFocusables.length === 1) {\n                return childFocusables;\n            }\n            focusables = focusables.concat(childFocusables);\n        }\n        return focusables;\n    }\n    /**\n     * Get focusable elements in the component\n     * Shadow DOM and slotted elements\n     * Theoretically in the correct order.\n     * @param {Boolean} keyboardOnly Only tabbable elements?\n     * @param {Boolean} single Only get the first one.\n     * @returns {HTMLElement[]}\n     */\n    findFocusables (keyboardOnly = false, single = false) {\n        return this.getFocusableChildren(this.shadowRoot, keyboardOnly, single);\n    }\n    /**\n     * Get the first focusable element in the modal.\n     * @returns {HTMLElement|null}\n     */\n    findFirstFocusable () {\n        return this.findFocusables(false, true).shift();\n    }\n    /**\n     * Get the first tabbing focusable element in the modal.\n     * @returns {HTMLElement|null}\n     */\n    findFirstTabFocusable () {\n        return this.findFocusables(true, true).shift();\n    }\n    /**\n     * Return last focusable element in the modal.\n     * @returns {HTMLElement|null}\n     */\n    findLastTabFocusable () {\n        const focusables = this.findFocusables(true);\n        return focusables[focusables.length - 1];\n    }\n    /**\n     * Find first focusable element in modal and focus on it.\n     */\n    focusFirst () {\n        const focusable = this.findFirstFocusable();\n        if (focusable) {\n            focusable.focus();\n        }\n    }\n    /**\n     * Handler: Clicks outside modal close the modal.\n     * Bound to this then listens on document.\n     * @param {MouseEvent} ev Click event.\n     */\n    outsideClickClose (ev) {\n        const close = ev.target.closest('modal-mib');\n        if (close === null) {\n            if (ev.target.classList.contains('btn-dialog')) {\n                return;\n            }\n            // Hide the help.\n            this.close();\n            this.clear();\n        }\n    }\n    /**\n     * Get focused element.\n     */\n    deepActiveElement () {\n        let a = document.activeElement;\n        while (a && a.shadowRoot && a.shadowRoot.activeElement) {\n            a = a.shadowRoot.activeElement;\n        }\n        return a;\n    }\n    /**\n     * Handler: Keyboard events to:\n     * - Close on Esc\n     * - Trap tab focus into modal.\n     * @param {KeyboardEvent} ev Keydown event\n     */\n    keyboardEvents (ev) {\n        if (ev.key === 'Escape') {\n            this.close();\n            return;\n        }\n        if (ev.key !== 'Tab') {\n            return;\n        }\n        // Get current active/focused element.\n        const currentEl = this.deepActiveElement();\n        if (ev.shiftKey) {\n            // Shift tab, only concerned with first element.\n            if (currentEl === this.findFirstFocusable() || currentEl === this.findFirstTabFocusable()) {\n                // Go to the last element in the modal.\n                const focusable = this.findLastTabFocusable();\n                if (focusable) {\n                    ev.preventDefault();\n                    focusable.focus();\n                }\n            }\n            return;\n        }\n        // Tab (no shift), only concerned with last element.\n        if (currentEl === this.findLastTabFocusable()) {\n            // Go to the first element in the modal.\n            const focusable = this.findFirstTabFocusable();\n            if (focusable) {\n                ev.preventDefault();\n                focusable.focus();\n            }\n        }\n    }\n    /**\n     * Open/show Modal\n     */\n    open () {\n        if (this.isOpen) {\n            return;\n        }\n        /**\n         * Get the opener trigger (usually a button/link).\n         */\n        this.opener = document.activeElement;\n        this.shadowRoot.host.hidden = false;\n        this.focusFirst();\n        // We need to do this to be able to remove the listener later.\n        this.boundOutsideClickClose = this.outsideClickClose.bind(this);\n        document.addEventListener('click', this.boundOutsideClickClose, true);\n        this.boundKeyboardEvents = this.keyboardEvents.bind(this);\n        document.addEventListener('keydown', this.boundKeyboardEvents, true);\n    }\n    /**\n     * Close the modal.\n     * Return focus to whatever opened it.\n     */\n    close () {\n        this.shadowRoot.host.hidden = true;\n        // Remove click handler to close modal.\n        document.removeEventListener('click', this.boundOutsideClickClose, true);\n        document.removeEventListener('keydown', this.boundKeyboardEvents, true);\n        if (this.opener) {\n            this.opener.focus();\n        }\n    }\n    /**\n     * Clear the modal, by removing the slotted elements in the light DOM\n     * Leaves the shadow DOM alone so we can reslot.\n     */\n    clear () {\n        while (this.firstChild) {\n            this.removeChild(this.firstChild);\n        }\n    }\n    /**\n     * Close and clear contents.\n     */\n    closeClear () {\n        this.close();\n        this.clear();\n    }\n    /**\n     * Handler clicks in the modal.\n     * If it's the close button then close the modal.\n     * @param {Event} ev Click event\n     */\n    handleCloseClick (ev) {\n        if (ev.target.classList.contains('close')) {\n            // Close button click\n            ev.preventDefault();\n            this.close();\n            this.clear();\n        }\n    }\n    /**\n     * Add content to modal, open it, focus on it.\n     * This adds the content slotted item to the light DOM.\n     * @param {HTMLElement[]|HTMLElement} content single element or Array of elements\n     * @param {Boolean} includeCloseButton Include a close button at the bottom.\n     */\n    setContent (content, includeCloseButton = true) {\n        if (!Array.isArray(content)) {\n            content = [content];\n        }\n        this.clear(); // make sure we start empty\n        const f = document.createDocumentFragment();\n        content.forEach((el) => {\n            // Default to content slot.\n            if (!el.getAttribute('slot')) {\n                el.setAttribute('slot', 'content');\n            }\n            f.appendChild(el);\n        });\n        if (includeCloseButton) {\n            f.appendChild(this.getCloseButton());\n        }\n        this.appendChild(f);\n        this.open();\n    }\n}\n\nwindow.customElements.define('modal-mib', Modal);\n\nexport default Modal;\n","/**\n * Action Toolbar\n */\nimport { getAllCharacters } from './CharacterService.js';\nimport ConfirmButton from './components/ConfirmButton.js';\nimport Modal from './components/Modal.js';\n\n/**\n * Buttons in the toolbar.\n * Mostly in re focus management and keyboard events.\n */\nclass ActionButton {\n    /**\n     * @param {HTMLElement} el Button element.\n     * @param {ActionMenu} menu\n     */\n    constructor (el, menu) {\n        this.el = el;\n        this.menu = menu;\n        this.action = el.dataset.action || '';\n        this.el.addEventListener('keydown', this.handleKeyBoardEvent.bind(this));\n        this.el.addEventListener('click', this.menu.setTabFocusToButton.bind(this.menu, this));\n    }\n    /**\n     * Handler: Keyboard actions.\n     * @param {KeyboardEvent} ev Keydown event.\n     */\n    handleKeyBoardEvent (ev) {\n        // Stop if any other modifer keys are pressed.\n        if (ev.shiftKey || ev.ctrlKey || ev.metaKey || ev.altKey) {\n            return;\n        }\n        if (ev.key === 'ArrowRight') {\n            this.removeTabFocus();\n            this.menu.setFocusToNext(this);\n            return;\n        }\n        if (ev.key === 'ArrowLeft') {\n            this.removeTabFocus();\n            this.menu.setFocusToPrevious(this);\n            return;\n        }\n        if (ev.key === 'Home') {\n            this.removeTabFocus();\n            this.menu.setFocusToFirst();\n            return;\n        }\n        if (ev.key === 'End') {\n            this.removeTabFocus();\n            this.menu.setFocusToLast();\n        }\n    }\n    /**\n     * Set button to not be tabbable.\n     */\n    removeTabFocus () {\n        this.el.setAttribute('tabindex', '-1');\n    }\n    /**\n     * Set button to be tabbable.\n     */\n    setTabFocus () {\n        this.el.setAttribute('tabindex', '0');\n    }\n    /**\n     * Focus on this button.\n     */\n    focus () {\n        this.el.focus();\n    }\n    /**\n     * Switch to this button. Set its tabindex and focus.\n     */\n    switchTo () {\n        this.setTabFocus();\n        this.focus();\n    }\n}\n\n/**\n * Toolbar and associated action events or dialogs.\n */\nconst ActionMenu = {\n    /**\n     * @prop {Array} Matching action button classes to methods to calls.\n     */\n    actions: {\n        save: 'saveCharacter',\n        load: 'openLoadModal',\n        new: 'newCharacter',\n        backup: 'openDownloadForm',\n        restore: 'openRestoreForm',\n        delete: 'openDeleteModal'\n    },\n    /**\n     * @prop {HTMLELement} Menu element\n     */\n    el: null,\n    /**\n     * @prop {HTMLELement} Menu toogle button when menu is collapsed on narrow screens.\n     */\n    opener: null,\n    /**\n     * @prop {Modal} Modal for load menu.\n     */\n    loadDialog: null,\n    /**\n     * @prop {Modal} Modal for Backup save.\n     */\n    downloadDialog: null,\n    /**\n     * @prop {Modal} Modal for Backup restore.\n     */\n    restoreDialog: null,\n    /**\n     * Show the dialog for backing up characters.\n     * Else close it if its open.\n     */\n    openDownloadForm: function () {\n        this.downloadDialog = this.downloadDialog || document.getElementById('dialog-backup');\n        this.downloadDialog.clear();\n        if (this.downloadDialog.isOpen) {\n            this.downloadDialog.close();\n            return;\n        }\n        const template = document.getElementById('backupModal');\n        const form = document.importNode(template.content, true);\n\n        const checkboxes = [];\n        getAllCharacters().forEach((char) => {\n            const li = `<li><label><input type=\"checkbox\" name=\"${char.key}\" value=\"${char.key}\" /> ${char.summaryHeader}</label></li>`;\n            checkboxes.push(li);\n        });\n        form.querySelector('.character_downloads').innerHTML = checkboxes.join('');\n        this.downloadDialog.setContent([...form.children], false);\n        this.downloadDialog.querySelector('form').addEventListener('submit', (ev) => {\n            ev.preventDefault();\n            this.emitter.trigger('backup:download', ev.target);\n        });\n    },\n    /**\n     * Show the back up restore form.\n     * Else close it if its open.\n     */\n    openRestoreForm: function () {\n        this.restoreDialog = this.restoreDialog || document.getElementById('dialog-restore');\n        this.restoreDialog.clear();\n        if (this.restoreDialog.isOpen) {\n            this.restoreDialog.close();\n            return;\n        }\n        const template = document.getElementById('restoreModal');\n        const form = document.importNode(template.content, true);\n        this.restoreDialog.setContent([...form.children], false);\n        this.restoreDialog.querySelector('form').addEventListener('submit', (ev) => {\n            ev.preventDefault();\n            this.emitter.trigger('backup:restore', ev.target);\n            this.restoreDialog.closeClear();\n        });\n    },\n    /**\n     * If file download is unavailable show the data to copy/paste\n     * @param {String} data the backup data\n     */\n    altDownload: function (data) {\n        const p = document.createElement('p');\n        p.innerHTML = `Your current browser/os does not support direct file downloads, so here is the data for you to copy/paste.`;\n        const text = document.createElement('textarea');\n        text.classList.add('large');\n        text.value = data;\n        this.downloadDialog.clear();\n        this.downloadDialog.header = 'Alernate Download Option';\n        this.downloadDialog.setContent([p, text, this.downloadDialog.getCloseButton()], false);\n        text.focus();\n        text.select();\n    },\n    /**\n     * Show email download link.\n     * @param {String} url The email url\n     */\n    emailDownload: function (url) {\n        const a = document.createElement('a');\n        a.href = url;\n        a.setAttribute('target', '_blank');\n        a.innerHTML = 'Open new message in default email client';\n        a.addEventListener('click', () => {\n            this.downloadDialog.closeClear();\n        });\n        const p = document.createElement('p');\n        p.appendChild(a);\n        this.downloadDialog.clear();\n        this.downloadDialog.setContent([p, this.downloadDialog.getCloseButton()], false);\n        this.downloadDialog.focusFirst();\n    },\n    /**\n     * Trigger a save character event.\n     */\n    saveCharacter: function () {\n        this.emitter.trigger('character:save');\n    },\n    /**\n     * Trigger a new character event.\n     */\n    newCharacter: function (button) {\n        this.emitter.trigger('character:new');\n        button.el.reset();\n    },\n    /**\n     * Load up a character by triggering a hash change.\n     * @param {Event} ev Click event\n     * @returns\n     */\n    loadCharClick: function (ev) {\n        const button = ev.currentTarget;\n        const charKey = button.dataset.key || '';\n        if (charKey === '') {\n            return;\n        }\n        window.location.hash = `#${charKey}`;\n    },\n    /**\n     * Open the dialog to load a character.\n     */\n    openLoadModal: function () {\n        this.loadDialog = this.loadDialog || document.getElementById('dialog-load');\n        this.loadDialog.clear();\n        if (this.loadDialog.isOpen) {\n            this.loadDialog.close();\n            return;\n        }\n\n        // Are there unsaved changes\n        // This could be done better in the future if we had some kind of central state management.\n        let currentlyUnsaved = false;\n        // is the unsaved dialog showing...\n        const unsavedDialog = document.querySelector('.alert-unsaved');\n        if (unsavedDialog && !unsavedDialog.hidden) {\n            currentlyUnsaved = true;\n        }\n\n        const template = document.getElementById('loadModal');\n        const content = document.importNode(template.content, true);\n        const list = content.querySelector('ul');\n        getAllCharacters().forEach((char) => {\n            const li = document.createElement('li');\n            const cButton = new ConfirmButton();\n            cButton.dataset.key = char.key;\n            cButton.classList.add('btn', 'btn-plain');\n            cButton.innerHTML = `<span slot=\"default\">${char.summaryHeader}</span>\n            <span slot=\"confirm\" hidden>Are you sure you want to load: ${(char.charname) ? char.charname : '[Unnamed]'}, you have unsaved changes.</span>`;\n            if (!currentlyUnsaved) {\n                cButton.confirm = false;\n            }\n            // set this so it's added _after_ the internal confirm event.\n            cButton.confirmCallback = this.loadCharClick.bind(this);\n            li.appendChild(cButton);\n            list.appendChild(li);\n        });\n        this.loadDialog.setContent([...content.children]);\n    },\n    /**\n     * Close the load modal.\n     */\n    closeLoadModal: function () {\n        if (this.loadDialog !== null) {\n            this.loadDialog.closeClear();\n        }\n    },\n    /**\n     * Modal for deleting characters.\n     */\n    openDeleteModal: function () {\n        const modal = document.getElementById('dialog-delete');\n        if (modal.isOpen) {\n            modal.close();\n            return;\n        }\n        const template = document.getElementById('deleteModal');\n        const content = document.importNode(template.content, true);\n\n        const items = [];\n        getAllCharacters().forEach((char) => {\n            const li = `<li><confirm-button data-key=\"${char.key}\" class=\"btn btn-plain btn-delete-char\">\n                <span slot=\"default\">${char.summaryHeader}</span>\n                <span slot=\"confirm\" hidden>Are you sure you want to delete: ${(char.charname) ? char.charname : '[Unnamed]'}</span>\n            </confirm-button></li>`;\n            items.push(li);\n        });\n        content.querySelector('ul').innerHTML = items.join('');\n\n        modal.setContent([...content.children]);\n        modal.querySelector('ul').addEventListener('click', (ev) => {\n            const button = ev.target.tagName === 'CONFIRM-BUTTON' ? ev.target : ev.target.closest('confirm-button');\n            if (button && button.classList.contains('btn-delete-char')) {\n                ev.preventDefault();\n                this.emitter.trigger('character:delete', button.getAttribute('data-key'));\n                modal.closeClear();\n            }\n        });\n    },\n    /**\n     * Set focus to next button (or wrap around).\n     * @param {ActionButton} currentBtn\n     */\n    setFocusToNext: function (currentBtn) {\n        const index = this.buttons.indexOf(currentBtn);\n        const newIndex = index + 1;\n        if (newIndex > this.buttons.length - 1) {\n            this.setFocusToFirst();\n            return;\n        }\n        this.buttons[newIndex].switchTo();\n    },\n    /**\n     * Set focus to previous button (or wrap around).\n     * @param {ActionButton} currentBtn\n     */\n    setFocusToPrevious: function (currentBtn) {\n        const index = this.buttons.indexOf(currentBtn);\n        const newIndex = index - 1;\n        if (newIndex < 0) {\n            this.setFocusToLast();\n            return;\n        }\n        this.buttons[newIndex].switchTo();\n    },\n    /**\n     * Set focus to first button.\n     */\n    setFocusToFirst: function () {\n        this.buttons[0].switchTo();\n    },\n    /**\n     * Set focus to last button.\n     */\n    setFocusToLast: function () {\n        this.buttons[this.buttons.length - 1].switchTo();\n    },\n\n    setTabFocusToButton: function (button) {\n        this.buttons.forEach((btn) => {\n            if (btn === button) {\n                btn.switchTo();\n            } else {\n                btn.removeTabFocus();\n            }\n        });\n    },\n    /**\n     * Add event handlers, etc.\n     * @param {EventEmitter} emitter\n     */\n    initialize: function (emitter) {\n        this.emitter = emitter;\n        this.el = document.querySelector('.app-actions');\n        this.buttons = [];\n        const buttons = this.el.querySelectorAll('button, confirm-button');\n        Array.prototype.forEach.call(buttons, (btn) => {\n            this.buttons.push(new ActionButton(btn, this));\n        });\n\n        this.opener = document.querySelector('.btn-open-actions');\n        // opener click handler\n        this.opener.addEventListener('click', (e) => {\n            this.el.classList.toggle('open');\n        });\n\n        // event handlers for all the menu buttons\n        this.el.addEventListener('click', (ev) => {\n            const target = ev.target.closest('button, confirm-button');\n            const button = this.buttons.find((btn) => { return btn.el === target; });\n            if (!button) {\n                return;\n            }\n            const action = this.actions[button.action] || null;\n            if (!action) {\n                return;\n            }\n            this[action](button);\n        });\n\n        this.emitter.on('loaddialog:close', this.closeLoadModal, this);\n        this.emitter.on('loaddialog:toggle', this.openLoadModal, this);\n        this.emitter.on('backup:email', this.emailDownload, this);\n        this.emitter.on('backup:textpaste', this.altDownload, this);\n    }\n};\n\nexport default ActionMenu;\n","/**\n * Handing keyboard shortcuts.\n */\nclass ShortCutKeys {\n    /**\n     * @param {EventEmitter} emitter\n     */\n    constructor (emitter) {\n        this.emitter = emitter;\n        this.shortcuts = {};\n        document.addEventListener('keydown', this.checkShortCuts.bind(this));\n    }\n    /**\n     * Add a shortcut that triggers an event.\n     * @param {String} keys Key Combo use 'Ctrl+' and 'Shift+' to indicate those keys.\n     * @param {String} event Event to emit.\n     */\n    addShortCut(keys, event) {\n        this.shortcuts[keys] = event;\n    }\n    /**\n     * Generate the key combo as a string.\n     * @param {String} key Key pressed.\n     * @param {Boolean} withControl Was control pressed.\n     * @param {Boolean} withShift Was shift pressed.\n     */\n    getKeyCode(key, withControl, withShift) {\n        let code = '';\n        if (withControl) {\n            code += 'Ctrl+';\n        }\n        if (withShift) {\n            code += 'Shift+';\n        }\n        code += key;\n        return code;\n    }\n    /**\n     * Handler: Keydown event.\n     * @param {KeyboardEvent} ev Keydown\n     */\n    checkShortCuts(ev) {\n        let withControl = false;\n        let withShift = false;\n        if (ev.ctrlKey) {\n            withControl = true;\n        }\n        if (ev.shiftKey) {\n            withShift = true;\n        }\n        let key = ev.key;\n        const code = this.getKeyCode(key, withControl, withShift);\n        var event = this.shortcuts[code] || null;\n        if (event) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.emitter.trigger(event);\n        }\n    }\n}\n\nexport default ShortCutKeys;\n","// Simple tabs.\nclass Tabs {\n    /**\n     * @param {Element} tablist UL element for the tabs.\n     */\n    constructor (tablist) {\n        this.tablist = tablist;\n        this.tabs = tablist.querySelectorAll('a[role=tab]');\n        this.panes = tablist.parentNode.querySelectorAll(':scope > section[role=tabpanel]');\n        Array.from(this.tabs).forEach((tab) => {\n            tab.addEventListener('click', this.changeTab.bind(this));\n        });\n    }\n    /**\n     * Switch to a specific pane.\n     * @param {String} paneId Html id of pane to switch to.\n     */\n    switchToPane(paneId) {\n        let newIndex = -1;\n        if (paneId) {\n            newIndex = Array.prototype.findIndex.call(this.panes, (el) => {\n                return el.id === paneId;\n            });\n        } else {\n            // next one.\n            const oldTab = this.tablist.querySelector('[aria-selected=true]');\n            const oldIndex = Array.prototype.indexOf.call(this.tabs, oldTab);\n            newIndex = oldIndex + 1;\n            if (newIndex >= this.tabs.length) {\n                newIndex = 0;\n            }\n        }\n        if (newIndex !== -1) {\n            this.tabs[newIndex].click();\n        }\n    }\n    /**\n     * Handler: Change tabs on tab click.\n     * @param {Event} ev Click event.\n     */\n    changeTab(ev) {\n        ev.preventDefault();\n        var oldTab = this.tablist.querySelector('[aria-selected=true]');\n        var oldIndex = Array.prototype.indexOf.call(this.tabs, oldTab);\n        var newTab = ev.currentTarget;\n        var newIndex = Array.prototype.indexOf.call(this.tabs, newTab);\n        if (oldIndex === newIndex) {\n            return;\n        }\n        oldTab.setAttribute('aria-selected', false);\n        newTab.setAttribute('aria-selected', true);\n        var oldPane = this.panes[oldIndex];\n        if (oldPane) {\n            oldPane.hidden = true;\n        }\n        var newPane = this.panes[newIndex];\n        if (!newPane) {\n            return;\n        }\n        newPane.hidden = false;\n        // Focus on first field.\n        newPane.querySelector('[data-name]').focus();\n    }\n}\n\n\nexport default Tabs;\n","import { default as Tabs} from '../Tabs.js';\n\nclass SheetView {\n    /**\n     * @param {EventEmitter} emitter\n     */\n    constructor(emitter) {\n        this.emitter = emitter;\n    }\n    /**\n     * @param {Character5e}\n     */\n    set character(character) {\n        this.cur_character = character;\n        // render character.\n        this.renderCharacter();\n    }\n    /**\n     * @returns {Character5e}\n     */\n    get character() {\n        return this.cur_character;\n    }\n    /**\n     * Change the main tab pane.\n     * @param {String} targetPane\n     */\n    switchToPane(targetPane) {\n        this.mainTabs.switchToPane(targetPane);\n    }\n    /**\n     * Take character data and fill it into the page\n     */\n    renderCharacter() {\n        if (this.cur_character === null) {\n            return;\n        }\n\n        document.querySelector('[data-name=\"charname\"]').content = this.cur_character.charname;\n\n        const fields = Array.from(this.el.querySelectorAll('*[data-name]'));\n        fields.forEach((el) => {\n            const f = el.getAttribute('data-name');\n            if (typeof this.cur_character[f] === 'undefined') {\n                return;\n            }\n            const subf = el.getAttribute('data-subfield');\n            const charValue = (subf) ? this.cur_character[f][subf] : this.cur_character[f];\n            switch (el.tagName) {\n                case 'INPUT':\n                    // Make sure numbers default to 0.\n                    // this is especially relevant for spell slots.\n                    if (el.getAttribute('type') === 'number') {\n                        el.value = charValue || 0;\n                    } else {\n                        el.value = charValue || '';\n                    }\n                    // For spell slot input we need to trigger the display or not of spells\n                    const event = new Event('change');\n                    el.dispatchEvent(event);\n                    break;\n                case 'SIMPLE-LIST':\n                    el.clear();\n                    let listItems = charValue || [];\n                    if (listItems.length > 0) {\n                        listItems.forEach((item) => {\n                            if (item.length === 0) {\n                                return;\n                            }\n                            el.addItem(item);\n                        })\n                    }\n                    el.addItem();\n                    break;\n                case 'NOTE-LIST':\n                    el.clear();\n                    let noteItems = charValue || [];\n                    if (noteItems.length > 0) {\n                        noteItems.forEach((item) => {\n                            if (item.length === 0) {\n                                return;\n                            }\n                            el.addItem(item);\n                        })\n                    }\n                    el.addItem([]);\n                    break;\n                case 'TABLE-EDITABLE':\n                    el.clear();\n                    let rowItems = charValue || [];\n                    if (rowItems.length > 0) {\n                        rowItems.forEach((item) => {\n                            if (item.length === 0) {\n                                return;\n                            }\n                            el.addRow(item);\n                        })\n                    }\n                    el.addRow();\n                    break;\n                case 'SKILL-LISTING':\n                    el.skillValue = charValue || 0;\n                    el.skillMod = this.cur_character.getSkillMod(subf);\n                    break;\n                case 'ATTR-LISTING':\n                    el.attributeScore = charValue || 10;\n                    el.attributeMod = this.cur_character.attributeMod(f);\n                    el.saveProficiency = this.cur_character.saves[f];\n                    el.saveMod = this.cur_character.saveMod(f);\n                    break;\n\n                case 'FIELD-EDITABLE':\n                    el.content = charValue || '';\n                    break;\n            }\n        });\n\n        this.el.querySelector('[data-name=\"proficiency\"]').innerHTML = this.cur_character.proficiency;\n\n        this.emitter.trigger('dialog:save:hide');\n    }\n    /**\n     * Update a skill's modifier in the UI.\n     * @param {String} skill\n     * @param {String} modifier\n     */\n    updateSkillMod(skill, modifier) {\n        const el = this.el.querySelector(`skill-listing[data-subfield=\"${skill}\"]`);\n        if (!el) {\n            return;\n        }\n        el.skillMod = modifier;\n    }\n    /**\n     * Update the proficiency modifier in the UI.\n     */\n    updateProficiency() {\n        const proficiency = this.cur_character.proficiency;\n        this.el.querySelector('[data-name=\"proficiency\"]').innerHTML = proficiency;\n\n        Array.from(this.el.querySelectorAll('skill-listing')).forEach((el) => {\n            const skill = el.skillName;\n            el.skillMod = this.cur_character.getSkillMod(skill);\n        });\n\n        Array.from(this.el.querySelectorAll('attr-listing')).forEach((el) => {\n            const attr = el.attributeName;\n            el.saveMod = this.cur_character.saveMod(attr);\n        });\n    }\n    /**\n     * Update an attribute's modifier in the UI.\n     * @param {String} attribute\n     */\n    updateAttributeMods(attribute) {\n        const el = this.el.querySelector(`attr-listing[data-name=${attribute}]`);\n        if (!el) {\n            return;\n        }\n        el.attributeMod = this.cur_character.attributeMod(attribute);\n        el.saveMod = this.cur_character.saveMod(attribute);\n    }\n    /**\n     * Update a save modifier in the UI.\n     * @param {String} attribute\n     */\n    updateSaveMods(attribute) {\n        const el = this.el.querySelector(`attr-listing[data-name=${attribute}]`);\n        if (!el) {\n            return;\n        }\n        el.saveMod = this.cur_character.saveMod(attribute);\n    }\n    /**\n     * Handle input[name=number] changes.\n     * @param {Event} ev\n     */\n    numberInputChange(ev) {\n        const field = ev.target.dataset.name;\n        const subfield = ev.target.dataset.subfield;\n        if (typeof this.cur_character[field][subfield] === 'undefined') {\n            return;\n        }\n        const newValue = parseInt(ev.target.value, 10);\n        this.cur_character[field][subfield] = newValue;\n        this.emitter.trigger('dialog:save:show');\n        if (field === 'spell_slots') {\n            const spellList = this.el.querySelector(`[data-name=\"spells\"][data-subfield=\"${subfield}\"]`);\n            if (!newValue) {\n                // this covers 0 and NaN\n                spellList.parentNode.hidden = true;\n            } else {\n                spellList.parentNode.hidden = false;\n            }\n        }\n    }\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this.el = document.querySelector('main');\n        this.mainTabs = new Tabs(this.el.querySelector('ul[role=tablist]'));\n        Array.from(this.el.querySelectorAll('input[type=number]')).forEach((el) => {\n            el.addEventListener('change', this.numberInputChange.bind(this));\n        });\n\n        this.emitter.on('character:skill:update', this.updateSkillMod, this);\n        this.emitter.on('character:proficiency:update', this.updateProficiency, this);\n        this.emitter.on('character:attribute:update', this.updateAttributeMods, this);\n        this.emitter.on('character:save:update', this.updateSaveMods, this);\n    }\n}\n\nexport default SheetView;\n","/**\n * Manager:\n * Interface for save/backup/restore of data...\n */\nimport { generateCharacterKey, newCharacter, getCharacter, saveCharacter, removeCharacter, getCharacterCount, importCharacter, setLocalStoragePrefix } from './CharacterService.js';\nimport ShortCutKeys from './ShortCutKeys.js';\nimport SheetView from './views/SheetView.js';\n\nconst Manager = {\n    /** @prop {EventEmitter} */\n    emitter: null,\n    /**\n     * Currently loaded character data is here\n     * @prop {Character5e}\n     */\n    cur_character: null,\n    /**\n     * App name used in character model app property\n     */\n    appname: '',\n    /**\n     * Unsaved dialog\n     */\n    dialog_unsaved: document.querySelector('.alert-unsaved'),\n    /**\n     * Undo delete dialog\n     */\n    dialog_undo: document.querySelector('.alert-delete'),\n    /**\n     * Start a new character by changing the hash.\n     */\n    triggerNewCharacter: function () {\n        window.location.hash = `#${generateCharacterKey()}`;\n    },\n    /**\n     * Change the character based on a hash change\n     * or maybe I should process the event in the handler and pass it here if necessary...\n     * @param {Object} e event object from hash change\n     */\n    changeCharacter: function () {\n        const urlhash = window.location.hash.substr(1);\n        this.loadCharacter(urlhash);\n    },\n    /**\n     * Load character data based on a key\n     * @param {String} key Character identifier\n     */\n    loadCharacter: function (key) {\n        this.hideUnsavedDialog();\n        this.cur_character = getCharacter(key);\n        if (!this.cur_character) {\n            this.cur_character = newCharacter(key);\n        }\n        this.cur_character.emitter = this.emitter;\n        this.sheetView.character = this.cur_character;\n        this.emitter.trigger('loaddialog:close');\n    },\n    /**\n     * Save character data\n     */\n    saveCharacter: function () {\n        if (this.cur_character === null) {\n            alert('No character to save.');\n            return;\n        }\n        if (this.cur_character.charname === '') {\n            alert('Your character must have name to save!');\n            return;\n        }\n        // For fields saved on blur we need to trigger it on the active field.\n        // Fields that save on change will already have saved.\n        if (document.activeElement) {\n            const event = new Event('blur');\n            document.activeElement.dispatchEvent(event);\n        }\n\n        saveCharacter(this.cur_character, this.appname);\n        this.hideUnsavedDialog();\n    },\n    /**\n     * Save a file of the current character\n     * Falls back to showing the data for copy/pasting\n     */\n    downloadBackup: function (form) {\n        const data = [];\n        const names = [];\n        const checks = Array.from(form.querySelectorAll('input[type=checkbox]:checked'));\n        checks.forEach((ch) => {\n            const character = getCharacter(ch.value);\n            data.push(character);\n            names.push(character.charname);\n        });\n\n        const format = form.querySelector('input[name=format]:checked').value;\n        const date = new Date();\n\n        if (format === 'email') {\n            const body = `Below is the backup data for your character(s) ${names.join(', ')}.\n\nTo use this data, go to: ${window.location.href} and click the \"Restore Backup\" button. Then paste the text below into the box.\n\n---\n\n${JSON.stringify(data)}`;\n\n            const url = `mailto:?subject=${encodeURIComponent(`Character backup: ${names.join(', ')} (${date.toLocaleString()})`)}&body=${encodeURIComponent(body)}`;\n\n            // Sadly this simple solution doesn't work in iOS\n            // document.location.href = url;\n            this.emitter.trigger('backup:email', url);\n        } else {\n            if (typeof window.Blob !== 'function') {\n                // fallback to displaying the data for copy/pasting\n                this.emitter.trigger('backup:textpaste', JSON.stringify(data));\n                return;\n            }\n            // for env that support it, create a file for download\n            const a = document.createElement('a');\n            const file = new Blob([JSON.stringify(data)], { type: 'application/json' });\n            const url = URL.createObjectURL(file);\n            a.href = url;\n            a.download = `${this.appname}_${date.getFullYear()}_${date.getMonth() + 1}_${date.getDate()}`;\n            document.body.appendChild(a);\n            a.click();\n            setTimeout(function () {\n                document.body.removeChild(a);\n                window.URL.revokeObjectURL(url);\n            }, 0);\n        }\n    },\n    /**\n     * Restore Backup form handler\n     * @param {HTMLElement} form\n     */\n    restoreFormSubmit: function (form) {\n        const input_file = form.querySelector('input[type=file]');\n        const input = form.querySelector('textarea');\n        if (input_file.files && input_file.files.length > 0) {\n            Array.from(input_file.files).forEach((f) => {\n                const reader = new FileReader();\n                // Closure to capture the file information.\n                reader.onload = ((theFile) => {\n                    return (e) => {\n                        this.restoreCharacters(e.target.result);\n                    };\n                })(f);\n                reader.readAsText(f);\n            });\n        } else if (input.value !== '') {\n            this.restoreCharacters(input.value);\n        }\n    },\n    /**\n     * Take json backup data and load the character(s)\n     * @param {String} data JSON string we hope\n     */\n    restoreCharacters: function (data) {\n        try {\n            // look for the start of the JSON string Array of Objects\n            let start = data.indexOf('[{');\n            let end = data.lastIndexOf('}]');\n            // make sure it's not :[{, an array of objects inside one of the objects\n            const check = data.indexOf(':[{');\n            if (check !== -1 && check < start) {\n                // if so start over\n                start = -1;\n            }\n            if (start === -1) {\n                start = data.indexOf('{');\n                end = data.lastIndexOf('}');\n                data = data.substring(start);\n                data = data.substring(0, end + 1);\n            } else {\n                data = data.substring(start);\n                data = data.substring(0, end + 2);\n            }\n            data = data.trim(); // just in case\n\n            // convert linebreaks to html br else JSON.parse breaks\n            // first make sure it's not a break between objects...\n            data = data.replace(/\\},[\\r\\n]+\\{/g, '},{');\n            data = data.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>');\n            let backups = JSON.parse(data);\n            // make it an array\n            if (!Array.isArray(backups)) {\n                backups = [backups];\n            }\n            const imported_chars = [];\n            backups.forEach((char_obj) => {\n                const newCharacter = importCharacter(char_obj, this.appname);\n                // if its the current character we should reload them\n                if (newCharacter.key === this.cur_character.key) {\n                    this.loadCharacter(newCharacter.key);\n                }\n                const li = document.createElement('li');\n                li.textContent = `${newCharacter.charname} has been added. `;\n                const a = document.createElement('a');\n                a.setAttribute('href', `#${newCharacter.key}`);\n                a.textContent = 'View character now.';\n                a.addEventListener('click', (e) => {\n                    this.alert.closeClear();\n                });\n                li.appendChild(a);\n                imported_chars.push(li);\n            });\n\n            const ul = document.createElement('ul');\n            imported_chars.forEach((li) => {\n                ul.appendChild(li);\n            });\n            this.alert.header = 'Restored Characters';\n            this.alert.setContent([ul]);\n        } catch (e) {\n            alert(`Error processing backup data: ${e.message}`);\n        }\n    },\n    /**\n     * Set a timeout to remove the character in a few seconds.\n     * @param {String} key character key\n     */\n    deleteCharacterTemp: function (key) {\n        if (key === '' || key === 'settings') {\n            return;\n        }\n        // if its the current character we should trigger \"new character\" action\n        if (this.cur_character !== null && this.cur_character.key === key) {\n            this.triggerNewCharacter();\n        }\n        this.dialog_undo.querySelector('button').dataset.key = key;\n        this.dialog_undo.hidden = false;\n        // This will trigger a transition bar.\n        const timeoutIndicator = this.dialog_undo.querySelector('.delete-timeout');\n        // The transition animation doesn't happen if you don't have this timeout,\n        // since we are also just now revealing the element.\n        setTimeout(() => {\n            timeoutIndicator.classList.add('transition', 'timeout');\n        }, 10);\n        // Note: if we change the timeout of the delete undo, we also need to change the transition timing in the css.\n        this[`deleteTimeout${key}`] = setTimeout(this.deleteCharacter.bind(this), 8000, key);\n    },\n    /**\n     * Delete a character from local storage\n     * @param {String} key character key\n     */\n    deleteCharacter: function (key) {\n        if (key === '' || key === 'settings') {\n            return;\n        }\n        removeCharacter(key);\n        this.dialog_undo.querySelector('button').dataset.key = '';\n        this.dialog_undo.hidden = true;\n        // This will reset the transition bar.\n        const timeoutIndicator = this.dialog_undo.querySelector('.delete-timeout');\n        timeoutIndicator.classList.remove('transition', 'timeout');\n        if (getCharacter(key)) {\n            // Character is still around, so error, I guess.\n            alert(`Error deleting the character with key: ${key}`);\n        }\n    },\n    /**\n     * Remove the timeout and stop the delete from happening.\n     * @param {Event} ev Undo button click.\n     */\n    undoDelete: function (ev) {\n        const key = ev.target.dataset.key || null;\n        if (!key) {\n            return;\n        }\n        this.dialog_undo.querySelector('button').dataset.key = '';\n        this.dialog_undo.hidden = true;\n        // Reset transition bar.\n        const timeoutIndicator = this.dialog_undo.querySelector('.delete-timeout');\n        timeoutIndicator.classList.remove('transition', 'timeout');\n        if (this[`deleteTimeout${key}`]) {\n            clearTimeout(this[`deleteTimeout${key}`]);\n        }\n    },\n    /**\n     * If no characters are saved we show an app intro dialog\n     */\n    showIntroDialog: function () {\n        const template = document.getElementById('introAlert');\n        this.alert.setContent([...document.importNode(template.content, true).children]);\n    },\n    /**\n     * Show the unsaved data dialog.\n     */\n    showUnsavedDialog: function () {\n        this.dialog_unsaved.hidden = false;\n    },\n    /**\n     * Hide the unsaved data dialog.\n     */\n    hideUnsavedDialog: function () {\n        this.dialog_unsaved.hidden = true;\n    },\n    /**\n     * Compare two properties to see if they are different\n     * For objects/arrays we need to account for them being different objects\n     * that have the same properties and values.\n     * @param {String|Number|Array|Object|Boolean} val1 Existing property value\n     * @param {String|Number|Array|Object|Boolean} val2 New property value\n     * @return {Boolean}\n     */\n    sameValues: function (val1, val2) {\n        // for efficiency we could do typeof checks\n        // and only use JSON for objects...\n        return JSON.stringify(val1) === JSON.stringify(val2);\n    },\n    /**\n     * When a field is changed in the UI.\n     * Update the character and trigger save dialog\n     * Only if the value is actually different.\n     * @param {CustomEvent} ev\n     */\n    handleFieldChange: function (ev) {\n        const field = ev.detail.field || '';\n        const subfield = ev.detail.subfield || '';\n        if (!field) {\n            return;\n        }\n        if (typeof this.cur_character[field] === 'undefined') {\n            return;\n        }\n        const newValue = ev.detail.value;\n        if (field === 'skills') {\n            const currentVal = this.cur_character.getSkill(subfield);\n            if (!this.sameValues(currentVal, newValue)) {\n                this.cur_character.setSkill(subfield, ev.detail.value);\n                this.showUnsavedDialog();\n            }\n            return;\n        }\n        if (subfield) {\n            if (typeof this.cur_character[field] !== 'object' || Array.isArray(this.cur_character[field])) {\n                return;\n            }\n            const currentVal = this.cur_character[field][subfield];\n            if (!this.sameValues(currentVal, newValue)) {\n                this.cur_character[field][subfield] = ev.detail.value;\n                this.showUnsavedDialog();\n            }\n            return;\n        }\n        const currentVal = this.cur_character[field];\n        if (!this.sameValues(currentVal, newValue)) {\n            this.cur_character[field] = newValue;\n            this.showUnsavedDialog();\n        }\n    },\n    /**\n     * When an attribute is changed in the UI.\n     * @param {CustomEvent} ev\n     */\n    handleAttributeChange: function (ev) {\n        const field = ev.detail.field || '';\n        if (!field) {\n            return;\n        }\n        this.cur_character.setAttribute(field, ev.detail.value);\n        this.showUnsavedDialog();\n    },\n    /**\n     * When a save is (un)checked in the UI.\n     * @param {CustomEvent} ev\n     */\n    handleSaveChange: function (ev) {\n        const field = ev.detail.field || '';\n        if (!field) {\n            return;\n        }\n        this.cur_character.setSaveProficiency(field, ev.detail.value);\n        this.showUnsavedDialog();\n    },\n    /**\n     * Start up the app with some events and such\n     * @param {Object} settings things we need to set external to this script\n     * @param {EventEmitter} settings.emitter\n     * @param {String} settings.prefix prefix for localStorage keys\n     * @param {String} settings.appname used to identify the app property in a character model\n     */\n    initialize: function (settings) {\n        if (!settings.emitter || !settings.prefix || !settings.appname) {\n            document.body.innerHTML = '<p>App is missing required settings.</p>';\n            return;\n        }\n        this.emitter = settings.emitter;\n        this.appname = settings.appname;\n        // set up storage\n        setLocalStoragePrefix(settings.prefix);\n        // set up default alert\n        this.alert = document.getElementById('alert-main');\n\n        this.sheetView = new SheetView(this.emitter);\n        this.sheetView.initialize();\n\n        if (getCharacterCount() === 0) {\n            this.showIntroDialog();\n        }\n\n        const shortCuts = new ShortCutKeys(this.emitter);\n        shortCuts.addShortCut('Ctrl+Shift+ArrowDown', 'character:save');\n        shortCuts.addShortCut('Ctrl+Shift+ArrowRight', 'tab:switch');\n        shortCuts.addShortCut('Ctrl+Shift+ArrowLeft', 'tab:switch');\n        shortCuts.addShortCut('Ctrl+Shift+ArrowUp', 'loaddialog:toggle');\n\n        document.querySelector('nav').addEventListener('click', (e) => {\n            if (e.target.tagName === 'A') {\n                e.preventDefault();\n                const link = e.target;\n                const targetPane = link.dataset.tab;\n                if (targetPane) {\n                    this.sheetView.switchToPane(targetPane);\n                }\n                const target_id = link.getAttribute('href').substring(1);\n                document.getElementById(target_id).scrollIntoView();\n            }\n        });\n\n        document.querySelector('.btn-help').addEventListener('click', (ev) => {\n            ev.preventDefault();\n            const template = document.getElementById('helpDialog');\n            const div = document.importNode(template.content, true);\n            this.alert.setContent([...div.children]);\n        });\n\n        // Event: Listen for hashchange and change the current character\n        window.addEventListener('hashchange', (e) => { this.changeCharacter(); }, false);\n\n        // Check the hash to see if we need to load a specific character\n        const urlhash = window.location.hash.substr(1);\n        if (urlhash !== '') {\n            this.loadCharacter(urlhash);\n        } else {\n            this.triggerNewCharacter();\n        }\n\n        this.dialog_unsaved.querySelector('.btn-save').addEventListener('click', (ev) => {\n            this.emitter.trigger('character:save');\n        });\n        this.dialog_undo.querySelector('.btn-delete-undo').addEventListener('click', (ev) => {\n            this.undoDelete(ev);\n        });\n\n        // Listen for events, mostly from the menus.\n        this.emitter.on('character:new', this.triggerNewCharacter, this);\n        this.emitter.on('character:save', this.saveCharacter, this);\n        this.emitter.on('character:delete', this.deleteCharacterTemp, this);\n        this.emitter.on('backup:download', this.downloadBackup, this);\n        this.emitter.on('backup:restore', this.restoreFormSubmit, this);\n        this.emitter.on('tab:switch', this.sheetView.switchToPane, this.sheetView);\n        this.emitter.on('dialog:save:show', this.showUnsavedDialog, this);\n        this.emitter.on('dialog:save:hide', this.hideUnsavedDialog, this);\n\n        document.addEventListener('fieldChange', this.handleFieldChange.bind(this));\n        document.addEventListener('attributeChange', this.handleAttributeChange.bind(this));\n        document.addEventListener('saveChange', this.handleSaveChange.bind(this));\n    }\n};\n\nexport default Manager;\n","/**\n * Container for Definition list pairs used as note header/text.\n */\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n<style>\n    :host {\n        display: block;\n        margin-bottom: .5rem;\n        padding-bottom: .5rem;\n        border-bottom: 1px solid rgb(207,0,15);\n    }\n    :host([hidden]) {\n        display: none\n    }\n    dt, dd {\n        display: block;\n        margin: 0;\n        padding: 0;\n        border: 1px dotted transparent;\n    }\n    dt {\n        font-weight: bold;\n    }\n    [contenteditable=true]:empty {\n        border: 1px dotted #bbb;\n        border-radius: 4px;\n    }\n</style>\n<dt contenteditable=\"true\"></dt>\n<dd contenteditable=\"true\"></dd>\n`;\n\nclass NoteListItem extends HTMLElement {\n\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n\n    connectedCallback() {\n        // set any default attributes\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'list-item');\n        }\n        // add event listeners\n        this.addEventListener('keypress', this._keyPress);\n    }\n\n    disconnectedCallback() {\n        // remove event listeners\n        this.removeEventListener('keypress', this._keyPress);\n    }\n    /**\n     * Get the content (header and text) of the pair.\n     */\n    get content() {\n        return [\n            this.shadowRoot.querySelector('dt').innerHTML,\n            this.shadowRoot.querySelector('dd').innerHTML\n        ];\n    }\n    /**\n     * Set the header and text of the pair.\n     * @param {String[]}\n     */\n    set content([header = '', text = '']) {\n        // set the content.\n        this.shadowRoot.querySelector('dt').innerHTML = header;\n        this.shadowRoot.querySelector('dd').innerHTML = text;\n    }\n    /**\n     * Clear the text.\n     */\n    clear() {\n        this.content = [];\n    }\n    /**\n     * Get the in focus element.\n     * @returns {Element}\n     */\n    deepActiveElement() {\n        let a = document.activeElement;\n        while (a && a.shadowRoot && a.shadowRoot.activeElement) {\n          a = a.shadowRoot.activeElement;\n        }\n        return a;\n    }\n    /**\n     * Handler: Enter to move through the items.\n     * @param {KeyboardEvent} ev Keypress event\n     */\n    _keyPress(ev) {\n        if (ev.key !== 'Enter' || ev.shiftKey) {\n            return;\n        }\n        const el = this.deepActiveElement();\n        if (el.tagName == 'DT' || el.closest('dt')) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            // focus on the sibling DD\n            this.shadowRoot.querySelector('dd').focus();\n        }\n    }\n    /**\n     * Focus method since HTMLElement doesn't have that by default (I think).\n     */\n    focus() {\n        this.shadowRoot.querySelector('dt').focus();\n    }\n}\n\nwindow.customElements.define('note-list-item', NoteListItem);\n\nexport default NoteListItem;\n","import { default as NoteListItem } from './NoteListItem.js';\n\n/**\n * Parent container for Definition list pairs used as note header/text.\n */\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n<style>\n    :host {\n        display: block;\n        margin: 0;\n        padding: 0;\n    }\n    :host([hidden]) {\n        display: none\n    }\n</style>\n`;\n\nclass NoteList extends HTMLElement {\n\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n\n    connectedCallback() {\n        // set any default attributes?\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'list');\n        }\n        // add event listeners\n        this.addEventListener('keypress', this._keyPress);\n        this.addEventListener('blur', this._blur);\n        this._upgradeProperty('fieldName');\n    }\n\n    disconnectedCallback() {\n        // remove event listeners\n        this.removeEventListener('keypress', this._keyPress);\n        this.removeEventListener('blur', this._blur);\n    }\n    /**\n     * In case the property was set before connecting\n     * this makes sure the value is retrieved and then reset so that the setter will get used.\n     * @param {String} prop\n     */\n    _upgradeProperty (prop) {\n        if (Object.prototype.hasOwnProperty.call(this, prop)) {\n            const value = this[prop];\n            delete this[prop];\n            this[prop] = value;\n        }\n    }\n    /**\n     * Setter: field name for data.\n     */\n    set fieldName (value) {\n        this.dataset.name = value;\n    }\n    /**\n     * Getter: field name for data.\n     */\n    get fieldName() {\n        return this.dataset.name || '';\n    }\n    /**\n     * Getter: Content of list items.\n     */\n    get contentArray() {\n        const items = Array.from(this.shadowRoot.querySelectorAll('note-list-item'));\n        let array = [];\n        items.forEach((item) => {\n            const content = item.content || null;\n            if (!Array.isArray(content)) {\n                return;\n            }\n            if (!content[0] && !content[1]) {\n                return;\n            }\n            array.push(content);\n        })\n        return array;\n    }\n    /**\n     * Add a new note-list-item.\n     * Set its header/text if appropriate.\n     * @param {String[]} array\n     */\n    addItem([header = '', text = '']) {\n        const item = new NoteListItem();\n        item.content = [header, text];\n        this.shadowRoot.appendChild(item);\n    }\n    /**\n     * Clear out the items.\n     */\n    clear() {\n        Array.from(this.shadowRoot.querySelectorAll('note-list-item')).forEach((item) => {\n            this.shadowRoot.removeChild(item);\n        });\n    }\n    /**\n     * Get focused element.\n     */\n    deepActiveElement() {\n        let a = document.activeElement;\n        while (a && a.shadowRoot && a.shadowRoot.activeElement) {\n          a = a.shadowRoot.activeElement;\n        }\n        return a;\n    }\n    /**\n     * Handler: Enter to move through the items or add new ones.\n     * @param {KeyboardEvent} ev Keypress event\n     */\n    _keyPress(ev) {\n        if (ev.key !== 'Enter' || ev.shiftKey) {\n            return;\n        }\n        // Get the focused element.\n        const el = this.deepActiveElement();\n        if (el.tagName === 'DD' || el.closest('dd')) {\n            ev.preventDefault();\n            // compare the focused elements parent component node (note-list-item) to the last item in the list.\n            if (el.parentNode.host === this.shadowRoot.lastElementChild) {\n                // Last one so add a new item and focus.\n                const newItem = new NoteListItem();\n                this.shadowRoot.appendChild(newItem);\n                newItem.focus();\n            } else {\n                // Move to the next item.\n                const nextItem = el.parentNode.host.nextElementSibling;\n                if (nextItem) {\n                    nextItem.focus();\n                }\n            }\n        }\n    }\n    /**\n     * On blur dispatch an event so the character model can be updated.\n     * @param {Event} ev\n     */\n    _blur(ev) {\n        const detail = {\n            field: this.fieldName,\n            value: this.contentArray\n        };\n        this.dispatchEvent(new CustomEvent('fieldChange', { bubbles: true, detail }));\n    }\n    /**\n     * Focus method since HTMLElement doesn't have that by default (I think).\n     */\n    focus() {\n        this.shadowRoot.querySelector('note-list-item').focus();\n    }\n}\n\nwindow.customElements.define('note-list', NoteList);\n\nexport default NoteList;\n","/**\n * Parent container for a simple list.\n */\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n<style>\n    :host {\n        display: block;\n        margin: 0 0 1rem 0;\n        padding: 0;\n    }\n    :host([hidden]) {\n        display: none\n    }\n    li {\n        display: block;\n        margin-bottom: 0.125rem;\n        border-bottom: 1px solid rgb(207,0,15);\n    }\n</style>\n`;\n\nclass SimpleList extends HTMLElement {\n\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n\n    connectedCallback() {\n        // set any default attributes?\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'list');\n        }\n        // add event listeners\n        this.addEventListener('keypress', this._keyPress);\n        this.addEventListener('blur', this._blur);\n        this._upgradeProperty('fieldName');\n        this._upgradeProperty('subFieldName');\n    }\n\n    disconnectedCallback() {\n        // remove event listeners\n        this.removeEventListener('keypress', this._keyPress);\n        this.removeEventListener('blur', this._blur);\n    }\n    /**\n     * In case the property was set before connecting\n     * this makes sure the value is retrieved and then reset so that the setter will get used.\n     * @param {String} prop\n     */\n    _upgradeProperty (prop) {\n        if (Object.prototype.hasOwnProperty.call(this, prop)) {\n            const value = this[prop];\n            delete this[prop];\n            this[prop] = value;\n        }\n    }\n    /**\n     * Setter: field name for data.\n     */\n    set fieldName (value) {\n        this.dataset.name = value;\n    }\n    /**\n     * Getter: field name for data.\n     */\n    get fieldName() {\n        return this.dataset.name || '';\n    }\n    /**\n     * Setter: subfield name for data.\n     */\n    set subFieldName(value) {\n        this.dataset.subfield = value;\n      }\n    /**\n     * Getter: subfield name for data.\n     */\n    get subFieldName() {\n        return this.dataset.subfield || '';\n    }\n    /**\n     * Getter: Content of list items.\n     */\n    get contentArray() {\n        const items = Array.from(this.shadowRoot.querySelectorAll('li'));\n        let array = [];\n        items.forEach((item) => {\n            const content = item.innerHTML;\n            if (content === '') {\n                return;\n            }\n            array.push(content);\n        })\n        return array;\n    }\n    /**\n     * Add a new li.\n     * Set its text if appropriate.\n     * @param {String} content\n     * @returns {HTMLLIElement}\n     */\n    addItem(content = '') {\n        const item = document.createElement('li');\n        item.setAttribute('contenteditable', true);\n        item.innerHTML = content;\n        this.shadowRoot.appendChild(item);\n        return item;\n    }\n    /**\n     * Clear out the items.\n     */\n    clear() {\n        Array.from(this.shadowRoot.querySelectorAll('li')).forEach((item) => {\n            this.shadowRoot.removeChild(item);\n        });\n    }\n    /**\n     * Get focused element.\n     */\n    deepActiveElement() {\n        let a = document.activeElement;\n        while (a && a.shadowRoot && a.shadowRoot.activeElement) {\n          a = a.shadowRoot.activeElement;\n        }\n        return a;\n    }\n    /**\n     * Handler: Enter to move through the items or add new ones.\n     * @param {KeyboardEvent} ev Keypress event\n     */\n    _keyPress(ev) {\n        if (ev.key !== 'Enter' || ev.shiftKey) {\n            return;\n        }\n        // Get the focused element.\n        const el = document.activeElement.shadowRoot.activeElement;\n        if (el.tagName == 'LI' || el.closest('li')) {\n            ev.preventDefault();\n            // compare the focused elements parent component node (note-list-item) to the last item in the list.\n            if (el === this.shadowRoot.lastElementChild) {\n                // Last one so add a new item and focus.\n                const newItem = this.addItem();\n                newItem.focus();\n            } else {\n                // Move to the next item.\n                const nextItem = el.nextElementSibling;\n                if (nextItem) {\n                    nextItem.focus();\n                }\n            }\n        }\n    }\n    /**\n     * On blur dispatch an event so the character model can be updated.\n     * @param {Event} ev\n     */\n    _blur(ev) {\n        const detail = {\n            field: this.fieldName,\n            subfield: this.subFieldName,\n            value: this.contentArray\n        };\n        this.dispatchEvent(new CustomEvent('fieldChange', { bubbles: true, detail }));\n    }\n    /**\n     * Focus method since HTMLElement doesn't have that by default (I think).\n     */\n    focus() {\n        this.shadowRoot.querySelector('li').focus();\n    }\n}\n\nwindow.customElements.define('simple-list', SimpleList);\n\nexport default SimpleList;\n","/**\n * Editable table.\n */\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n<style>\n    :host {\n        display: table;\n        border-collapse: collapse;\n        text-align: left;\n        border: none;\n        width: 100%;\n        margin-bottom: 1.5rem;\n    }\n    :host([hidden]) {\n        display: none\n    }\n    th {\n        font-weight: bold;\n    }\n    tbody tr {\n        border-bottom: 1px solid rgb(207,0,15);\n        margin-bottom: .25rem;\n    }\n    th, td {\n        padding: .25rem;\n    }\n    td[contenteditable=true] {\n        display: table-cell;\n        padding: .25rem;\n        margin-bottom: .25rem;\n    }\n</style>\n<thead>\n    <tr></tr>\n</thead>\n<tbody>\n</tbody>\n<slot></slot>\n`;\n\nclass TableEditable extends HTMLElement {\n\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\n        this.columns = 0;\n    }\n\n    connectedCallback() {\n        // set any default attributes?\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'table');\n        }\n        // add event listeners\n        this.addEventListener('keypress', this._keyPress);\n        this.addEventListener('blur', this._blur);\n        this._upgradeProperty('fieldName');\n        this.columnNames = this.getAttribute('columns').split('||');\n        this.columns = this.columnNames.length;\n\n        const headRow = this.shadowRoot.querySelector('thead tr');\n        this.columnNames.forEach((name) => {\n            const th = document.createElement('th');\n            th.innerHTML = name;\n            headRow.appendChild(th);\n        });\n    }\n\n    disconnectedCallback() {\n        // remove event listeners\n        this.removeEventListener('keypress', this._keyPress);\n        this.removeEventListener('blur', this._blur);\n    }\n    /**\n     * In case the property was set before connecting\n     * this makes sure the value is retrieved and then reset so that the setter will get used.\n     * @param {String} prop\n     */\n    _upgradeProperty (prop) {\n        if (Object.prototype.hasOwnProperty.call(this, prop)) {\n            const value = this[prop];\n            delete this[prop];\n            this[prop] = value;\n        }\n    }\n    /**\n     * Setter: field name for data.\n     */\n    set fieldName (value) {\n        this.dataset.name = value;\n    }\n    /**\n     * Getter: field name for data.\n     */\n    get fieldName() {\n        return this.dataset.name || '';\n    }\n    /**\n     * Getter: Content of list items.\n     */\n    get contentArray() {\n        const entries = [];\n        const rows = Array.from(this.shadowRoot.querySelectorAll('tbody > tr'));\n\n        rows.forEach((row) => {\n            const cells = Array.from(row.querySelectorAll('td'));\n            if (cells.length === 0) {\n                return;\n            }\n            const rowData = [];\n            cells.forEach((cell) => {\n                const text = cell.innerHTML;\n                rowData.push(text);\n            });\n            const filledCells = rowData.filter((el) => { return el !== ''; });\n            if (filledCells.length === 0) {\n                return;\n            }\n            entries.push(rowData);\n        });\n        return entries;\n    }\n    /**\n     * Add a new row to the table.\n     * Set its header/text if appropriate.\n     * @param {String[]} array\n     * @returns {HTMLTableRowElement}\n     */\n    addRow(content = []) {\n        const row = document.createElement('tr');\n        const cell = document.createElement('td');\n        cell.setAttribute('contenteditable', true);\n\n        for (let i = 0; i < this.columns; i++) {\n            const newCell = cell.cloneNode(false);\n            newCell.innerHTML = content[i] || '';\n            row.appendChild(newCell);\n        }\n        this.shadowRoot.querySelector('tbody').appendChild(row);\n        return row;\n    }\n    /**\n     * Clear out the body rows.\n     */\n    clear() {\n        Array.from(this.shadowRoot.querySelectorAll('tbody > tr')).forEach((row) => {\n            row.parentNode.removeChild(row);\n        });\n    }\n    /**\n     * Get focused element.\n     */\n    deepActiveElement() {\n        let a = document.activeElement;\n        while (a && a.shadowRoot && a.shadowRoot.activeElement) {\n          a = a.shadowRoot.activeElement;\n        }\n        return a;\n    }\n    /**\n     * Handler: Enter to move through the items or add new ones.\n     * @param {KeyboardEvent} ev Keypress event\n     */\n    _keyPress(ev) {\n        if (ev.key !== 'Enter' || ev.shiftKey) {\n            return;\n        }\n        // Get the focused element.\n        const el = this.deepActiveElement();\n        if (el.tagName !== 'TD' && !el.closest(`td`)) {\n            return;\n        }\n        ev.preventDefault();\n        const td = el.tagName === 'TD' ? el : el.closest(`td`);\n        const row = td.parentElement;\n        // if it's not the last cell, move to the next cell.\n        if (td !== row.lastElementChild) {\n            const nextCell = td.nextElementSibling;\n            if (nextCell) {\n                nextCell.focus();\n            }\n            return;\n        }\n        // it is the last cell.\n        // if there is a next row focus its first cell.\n        const nextRow = row.nextElementSibling;\n        if (nextRow) {\n            nextRow.querySelector('td').focus();\n            return;\n        }\n        const newRow = this.addRow();\n        newRow.querySelector('td').focus();\n    }\n    /**\n     * On blur dispatch an event so the character model can be updated.\n     * @param {Event} ev\n     */\n    _blur(ev) {\n        const detail = {\n            field: this.fieldName,\n            value: this.contentArray\n        };\n        this.dispatchEvent(new CustomEvent('fieldChange', { bubbles: true, detail }));\n    }\n    /**\n     * Focus method since HTMLElement doesn't have that by default (I think).\n     */\n    focus() {\n        this.shadowRoot.querySelector('[contenteditable=true]').focus();\n    }\n}\n\nwindow.customElements.define('table-editable', TableEditable);\n\nexport default TableEditable;\n","/**\n * Container for skill check boxes and data.\n */\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n<style>\n    :host {\n        display: block;\n        margin-bottom: .25rem;\n        white-space: nowrap;\n    }\n    :host([hidden]) {\n        display: none\n    }\n    label {\n        display: inline-block;\n        margin-right: 1rem;\n    }\n    input[type=checkbox] {\n        width: auto;\n        margin-right: 0.5rem;\n        display: inline-block;\n    }\n</style>\n<label>\n    <input type=\"checkbox\" value=1 data-name=\"skills\" />\n    <input type=\"checkbox\" value=1 data-name=\"expert\" aria-label=\"Skill Expertise\" disabled />\n    <span class=\"pc-skill-name\"><slot>Unknown Skill</slot></span>\n</label>\n<span class=\"pc-skill-mod\">0</span>\n`;\n\nclass SkillListing extends HTMLElement {\n    constructor () {\n        super();\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n\n    connectedCallback () {\n        // set any default attributes\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'list-item');\n        }\n\n        this.profCheck = this.shadowRoot.querySelector('input[data-name=\"skills\"]');\n        this.expertCheck = this.shadowRoot.querySelector('input[data-name=\"expert\"]');\n        // add event listeners\n        this.profCheck.addEventListener('change', this._checkSkills);\n        this.expertCheck.addEventListener('change', this._checkExpert);\n    }\n\n    disconnectedCallback () {\n        // remove event listeners\n        this.profCheck.removeEventListener('change', this._checkSkills);\n        this.expertCheck.removeEventListener('change', this._checkExpert);\n    }\n    /**\n     * Name of the skill based on the data-subfield attribute.\n     * @returns {String}\n     */\n    get skillName () {\n        return this.dataset.subfield || '';\n    }\n    /**\n     * Set skill name.\n     * @param {String} val\n     */\n    set skillName (val) {\n        this.dataset.subfield = val;\n    }\n    get skillLabel () {\n        return this.shadowRoot.querySelector('.pc-skill-name').innerHTML;\n    }\n    /**\n     * Set human readable label\n     * @param {String} val\n     */\n    set skillLabel (val) {\n        this.shadowRoot.querySelector('.pc-skill-name').innerHTML = val;\n    }\n    /**\n     * Set skill proficiency/expert status.\n     * @param {Number} val\n     */\n    set skillValue (val) {\n        this.profCheck.checked = false;\n        this.expertCheck.checked = false;\n        if (val > 0) {\n            this.profCheck.checked = true;\n            this.expertCheck.disabled = false;\n        }\n        if (val > 1) {\n            this.expertCheck.checked = true;\n        }\n    }\n    get skillMod () {\n        return this.shadowRoot.querySelector('.pc-skill-mod').innerHTML;\n    }\n    /**\n     * Set the skill modifiter.\n     * @param {String} mod\n     */\n    set skillMod (mod) {\n        this.shadowRoot.querySelector('.pc-skill-mod').innerHTML = mod;\n    }\n    /**\n     * Handler when proficiency is (un)checked.\n     * @param {Event} ev\n     */\n    _checkSkills (ev) {\n        console.log(ev.target);\n        console.log(ev.currentTarget);\n        const host = this.getRootNode().host;\n        // change event for checkboxes\n        // check data-name of check.\n        const expert = host.expertCheck;\n        if (!ev.target.checked) {\n            expert.checked = false;\n            expert.disabled = true;\n        } else {\n            expert.disabled = false;\n        }\n\n        const detail = {\n            field: 'skills',\n            subfield: host.skillName,\n            value: ev.target.checked ? 1 : 0\n        };\n        host.dispatchEvent(new CustomEvent('fieldChange', { bubbles: true, detail }));\n    }\n    /**\n     * Handler when expert is (un)checked.\n     * @param {Event} ev\n     */\n    _checkExpert (ev) {\n        console.log(ev.target);\n        console.log(ev.currentTarget);\n        // change event for checkboxes\n        // check data-name of check.\n        const host = this.getRootNode().host;\n\n        const detail = {\n            field: 'skills',\n            subfield: host.skillName,\n            value: ev.target.checked ? 2 : 1\n        };\n        host.dispatchEvent(new CustomEvent('fieldChange', { bubbles: true, detail }));\n    }\n    /**\n     * Focus method since HTMLElement doesn't have that by default (I think).\n     */\n    focus () {\n        this.shadowRoot.querySelector('input').focus();\n    }\n}\n\nwindow.customElements.define('skill-listing', SkillListing);\n\nexport default SkillListing;\n","/**\n * Attribute score/bonus/saves.\n */\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n<style>\n    :host {\n        display: block;\n        margin-bottom: .75rem;\n        white-space: nowrap;\n    }\n    :host([hidden]) {\n        display: none\n    }\n    label {\n        display: inline-block;\n        margin-right: 1rem;\n        width: auto;\n        font-weight: bold;\n    }\n    label:first-of-type {\n        width: 2rem;\n    }\n    input[type=number] {\n        display: inline-block;\n        margin-right: 1rem;\n        width: 3rem;\n        border: 1px dotted #bbb;\n        border-radius: .4rem;\n        padding: 0;\n        font-size: 1rem;\n    }\n    input[type=checkbox] {\n        width: auto;\n        margin-right: 0.5rem;\n        display: inline-block;\n    }\n    .pc-attribute-mod, .pc-save-mode {\n        display: inline-block;\n        margin-right: 1rem;\n        font-weight: bold;\n        min-width: 1.5rem;\n        text-align: right;\n    }\n</style>\n<label for=\"score\"><slot></slot></label>\n<input type=\"number\" id=\"score\" class=\"pc-attribute\" value=10 min=3 max=25 />\n<span class=\"pc-attribute-mod\">0</span>\n<label>\n    <input type=\"checkbox\" name=\"pc-save\" value=1 />\n    Save\n</label>\n<span class=\"pc-save-mod small\">0</span>\n`;\n\nclass AttributeListing extends HTMLElement {\n\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n\n    connectedCallback() {\n        // set any default attributes\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'list-item');\n        }\n\n        this.scoreInput = this.shadowRoot.querySelector('input.pc-attribute');\n        this.saveCheck = this.shadowRoot.querySelector('input[name=\"pc-save\"]');\n\n        // add event listeners\n        this.saveCheck.addEventListener('change', this._checkSave);\n        this.scoreInput.addEventListener('change', this._scoreUpdate);\n    }\n\n    disconnectedCallback() {\n        // remove event listeners\n        this.saveCheck.removeEventListener('change', this._checkSave);\n        this.scoreInput.removeEventListener('change', this._scoreUpdate);\n    }\n    /**\n     * Name of the skill based on the data-name attribute.\n     * @returns {String}\n     */\n    get attributeName() {\n        return this.dataset.name || '';\n    }\n    /**\n     * Set attribute name.\n     * @param {String} val\n     */\n    set attributeName(val) {\n        this.dataset.name = val;\n    }\n    /**\n     * Get current attribute score.\n     * @returns {Number}\n     */\n    get attributeScore() {\n        return parseInt(this.scoreInput.value, 10);\n    }\n    /**\n     * Set the attribute score.\n     * @param {Number} val\n     */\n    set attributeScore(val) {\n        this.scoreInput.value = val;\n    }\n    /**\n     * Get if the save is proficient.\n     * @returns {Number}\n     */\n    get saveProficiency() {\n        return this.saveCheck.checked ? 1 : 0;\n    }\n    /**\n     * Check (or not) the save proficiency.\n     * @param {Number} val\n     */\n    set saveProficiency(val) {\n        this.saveCheck.checked = (val);\n    }\n    /**\n     * Set the attribute modifier.\n     * @param {String} val\n     */\n    set attributeMod(val) {\n        this.shadowRoot.querySelector('.pc-attribute-mod').innerHTML = val;\n    }\n    /**\n     * Set the save modifier.\n     * @param {String} mod\n     */\n    set saveMod(mod) {\n        this.shadowRoot.querySelector('.pc-save-mod').innerHTML = mod;\n    }\n    /**\n     * Handler: Change event on saves.\n     * @param {Event} ev\n     */\n    _checkSave(ev) {\n        console.log(ev.target);\n        console.log(ev.currentTarget);\n        const host = this.getRootNode().host;\n\n        const detail = {\n            field: host.attributeName,\n            value: ev.target.checked ? 1 : 0\n        };\n        host.dispatchEvent(new CustomEvent('saveChange', { bubbles: true, detail }));\n    }\n    /**\n     * Handler: Change event on number input.\n     * @param {Event} ev\n     */\n    _scoreUpdate(ev) {\n        const host = this.getRootNode().host;\n        const detail = {\n            field: host.attributeName,\n            value: ev.target.value\n        };\n        host.dispatchEvent(new CustomEvent('attributeChange', { bubbles: true, detail }));\n    }\n    /**\n     * Focus method since HTMLElement doesn't have that by default (I think).\n     */\n    focus() {\n        this.shadowRoot.querySelector('input').focus();\n    }\n}\n\nwindow.customElements.define('attr-listing', AttributeListing);\n\nexport default AttributeListing;\n","/**\n * Simple Editable field.\n */\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n<style>\n    :host {\n        display: block;\n        width: 100%;\n        display: flex;\n    }\n    :host([hidden]) {\n        display: none\n    }\n    [contenteditable=true] {\n        display: inline-block;\n        width: 100%;\n        min-height: 100%;\n    }\n    [contenteditable=true]:empty:before {\n        content: attr(placeholder);\n        color: #aaa;\n    }\n    [contenteditable=true]:empty {\n        border: 1px dotted #bbb;\n        border-radius: 4px;\n    }\n</style>\n<span contenteditable=\"true\"></span>\n`;\n\nclass EditableField extends HTMLElement {\n\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n\n    connectedCallback() {\n        if (this.hasAttribute('placeholder')) {\n            this.placeholderText = this.getAttribute('placeholder');\n        }\n\n        // add event listeners\n        this.addEventListener('blur', this._blur);\n        this._upgradeProperty('fieldName');\n    }\n\n    disconnectedCallback() {\n        // remove event listeners\n        this.removeEventListener('blur', this._blur);\n    }\n    /**\n     * In case the property was set before connecting\n     * this makes sure the value is retrieved and then reset so that the setter will get used.\n     * @param {String} prop\n     */\n    _upgradeProperty (prop) {\n        if (Object.prototype.hasOwnProperty.call(this, prop)) {\n            const value = this[prop];\n            delete this[prop];\n            this[prop] = value;\n        }\n    }\n    /**\n     * Setter: field name for data.\n     */\n    set fieldName (value) {\n        this.dataset.name = value;\n    }\n    /**\n     * Getter: field name for data.\n     */\n    get fieldName() {\n        return this.dataset.name || '';\n    }\n    /**\n     * Set placeholder text in the field.\n     */\n    set placeholderText(val) {\n        this.shadowRoot.querySelector('span').setAttribute('placeholder', val);\n    }\n    /**\n     * Getter: Content of field.\n     * @returns {String}\n     */\n    get content() {\n        return this.shadowRoot.querySelector('span').innerHTML;\n    }\n    /**\n     * Setter: Content of field.\n     * @param {String} value\n     */\n    set content(value) {\n        this.shadowRoot.querySelector('span').innerHTML = value;\n    }\n    /**\n     * On blur dispatch an event so the character model can be updated.\n     * @param {Event} ev\n     */\n    _blur(ev) {\n        let currentVal = this.content;\n        // Trim empty end spaces/line breaks\n        currentVal = currentVal.trim().replace(/(\\s|&nbsp;|<br\\/?>)+$/, '');\n        this.content = currentVal;\n        const detail = {\n            field: this.fieldName,\n            value: currentVal\n        };\n        this.dispatchEvent(new CustomEvent('fieldChange', { bubbles: true, detail }));\n    }\n    /**\n     * Focus\n     */\n    focus() {\n        this.shadowRoot.querySelector('[contenteditable=true]').focus();\n    }\n}\n\nwindow.customElements.define('field-editable', EditableField);\n\nexport default EditableField;\n","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","module.exports = require('./helpers/bundle-url').getBundleURL('bJatm') + require('./helpers/bundle-manifest').resolve(\"8uk0L\");","import ActionMenu from './ActionMenu.js';\nimport EventEmitter from './EventEmitter.js';\nimport Manager from './Manager.js';\n\nimport NoteListItem from './components/NoteListItem.js';\nimport NoteList from './components/NoteList.js';\nimport SimpleList from './components/SimpleList.js';\nimport TableEditable from './components/TableEditable.js';\nimport SkillListing from './components/SkillListing.js';\nimport AttributeListing from './components/AttributeListing.js';\nimport EditableField from './components/EditableField.js';\nimport ConfirmButton from './components/ConfirmButton.js';\nimport Modal from './components/Modal.js';\n/**\n* Register service worker if it's supported\n*/\nif ('serviceWorker' in navigator) {\n    // navigator.serviceWorker.register('service_worker.js', {\n    //     scope: '/'\n    // });\n    navigator.serviceWorker.register(\n        new URL('service_worker.js', import.meta.url),\n        {\n            type: 'module'\n        }\n    );\n}\n\nconst emitter = new EventEmitter();\nActionMenu.initialize(emitter);\n\nManager.initialize({\n    emitter: emitter,\n    prefix: 'charsheet-5e-',\n    appname: 'character-sheet-5e'\n});\n","/**\n * @prop {Object} events Store the events here.\n * @prop {Boolean} debug So you can more easily in dev see when events are triggered.\n */\nexport default class EventEmitter {\n\n    constructor () {\n        this.events = {};\n        this.debug = false;\n    }\n    /**\n     * Get index of listener in the event array.\n     * -1 means it isn't there\n     * @param {String} event Event to check.\n     * @param {Function} listener Listener to check.\n     * @return {Number}\n     */\n    listenerIndex (event, listener) {\n        return this.events[event].findIndex((item) => {\n            return item.listener === listener;\n        });\n    }\n    /**\n     * Listen to an event\n     * @param {String} event Name of the event to listen for.\n     * @param {Function|Array} listener Callback to trigger for event OR an array of [classname, methodName]\n     * @param {Object} boundObj Object to bind the callback to.\n     * @return {undefined}\n     */\n    on (event, listener, boundObj = null) {\n        if (typeof listener !== 'function') {\n            return;\n        }\n        this.events[event] = this.events[event] || [];\n        if (this.events[event].length > 0) {\n            var index = this.listenerIndex(event, listener);\n            // Replace the listener if it already exists.\n            if (index > -1) {\n                this.events[event].splice(index, 1);\n            }\n        }\n        this.events[event].push({ listener: listener, boundObj: boundObj });\n    }\n    /**\n     * Stop listening to an event.\n     * Remove event if it was the last listener.\n     * @param {String} event Name of the event.\n     * @param {Function} listener Callback to remove.\n     * @return {undefined}\n     */\n    off (event, listener) {\n        if (Array.isArray(this.events[event])) {\n            var index = this.listenerIndex(event, listener);\n            if (index === -1) {\n                return;\n            }\n            this.events[event].splice(index, 1);\n            if (this.events[event].length === 0) {\n                delete this.events[event];\n            }\n        }\n    }\n    /**\n     * Listen for an event but only trigger it once, then it is removed.\n     * @param {String} event Name of the event to listen for.\n     * @param {Function} listener Callback to trigger for event.\n     * @param {Object} boundObj Object to bind the callback to.\n     */\n    once (event, listener, boundObj) {\n        this.on(event, function wrap () {\n            this.off(event, wrap);\n            var binder = typeof boundObj === 'undefined' ? this : boundObj;\n            listener.apply(binder, arguments);\n        });\n    }\n    /**\n     * Trigger an event. This will cause any listeners for that event to be called.\n     * Any arguments after the event will be passed on to the callback(s).\n     * @param {String} event Event to trigger.\n     */\n    trigger (event) {\n        if (this.debug && console) {\n            console.log(`EventEmitter triggered: ${event}`);\n        }\n        var args = [].slice.call(arguments, 1);\n\n        if (Array.isArray(this.events[event])) {\n            this.events[event].forEach((listenObj) => {\n                var binder = listenObj.boundObj === null ? this : listenObj.boundObj;\n                listenObj.listener.apply(binder, args);\n            });\n        }\n    };\n};\n"],"names":["$8b4d1930797b255e$export$6503ec6e8aabbaf","$8b4d1930797b255e$export$f7ad0328861e2f03","$8b4d1930797b255e$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$415c6fd751df4d45$export$16bd37df0047a29c","freeze","STRENGTH","DEXTERITY","CONSTITUTION","INTELLIGENCE","WISDOM","CHARISMA","$415c6fd751df4d45$export$8988b7f74746dba7","acrobatics","animal_handling","arcana","athletics","deception","history","insight","intimidation","investigation","medicine","nature","perception","performance","persuasion","religion","sleight_of_hand","stealth","survival","$415c6fd751df4d45$export$28359a7915bd1c47","UNSKILLED","PROFICIENT","EXPERT","constructor","key","charname","charclass","race","background","alignment","level","experience","inspiration","armor_class","speed","hp_cur","hp_max","hd_cur","hd_max","deathSave","success","fail","class_points","cur","max","str","dex","con","intel","wis","cha","saves","skills","weapons","proficiencies_other","languages","traits","ideals","bonds","flaws","appearance","equipment","cp","sp","gp","pp","features","notes","notes_adv","notes_cam","npcs","factions","partymembers","spell_ability","spell_save","spell_attack","spell_slots","spell_slots_cur","spells","updated","key_prev","this","app","_level","sleight","Array","isArray","lines","split","RegExp","map","el","emitter","newVal","prof","proficiency","trigger","summaryHeader","Math","ceil","setAttribute","attribute","value","skill","getSkillMod","attributeMod","attribute1","score","Number","isNaN","raw","floor","toString","isProficient","isExpert","skill1","skill2","parseInt","getSkill","skill3","setSkill","skill4","newValue","curValue","isSaveProficient","attr","saveMod","attr1","profMod","setSaveProficiency","attr2","checked","toJSON","obj","getOwnPropertyNames","forEach","prop","substr","$d6e0c9109cc8185f$export$2e2bcd8739ae039","prefix","setPrefix","get","txt","localStorage","getItem","set","e","object","setItem","stringify","removeItem","console","log","message","remove","getAllKeys","key_regex","indexOf","match","replace","push","$c761d758defe0b40$export$4403985d705af8e8","random","slice","$c761d758defe0b40$export$26587c7bab985281","char_obj","$d0528c967a320bad$export$2e2bcd8739ae039","$c761d758defe0b40$export$ff38e00fc7f7ef8e","character","appname","Date","toUTCString","$c761d758defe0b40$export$6b5799d3dc4d93ba","characters","$8caf4d1fd832f06a$var$template","document","createElement","innerHTML","HTMLElement","super","attachShadow","mode","shadowRoot","appendChild","content","cloneNode","_wait","_triggered","_confirm","_confirmCallback","host","dataset","triggered","getAttribute","addEventListener","_handleKeyDown","wait","undefined","confirm","from","children","slotted","hidden","disconnectedCallback","removeEventListener","_handleClick","value1","ev","stopImmediatePropagation","$7b134517e32cfa9e$var$template","opener","handleCloseClick","header","querySelector","html","button","classList","add","getChildren","node","assignedElements","assigned","tabIndex","element","contentEditable","tagName","keyboardOnly","getFocusableChildren","element1","keyboardOnly1","single","focusables","isFocusable","child","childFocusables","concat","findFocusables","shift","findFirstTabFocusable","focusFirst","focusable","findFirstFocusable","focus","outsideClickClose","target","closest","close","clear","deepActiveElement","a","activeElement","keyboardEvents","ev1","currentEl","findLastTabFocusable","preventDefault","boundOutsideClickClose","bind","boundKeyboardEvents","$a732fdf9da71c8ac$var$ActionButton","menu","action","handleKeyBoardEvent","setTabFocusToButton","shiftKey","ctrlKey","metaKey","altKey","removeTabFocus","setFocusToNext","setFocusToPrevious","setFocusToFirst","setFocusToLast","setTabFocus","switchTo","actions","save","load","new","backup","restore","delete","loadDialog","downloadDialog","restoreDialog","openDownloadForm","getElementById","isOpen","template","form","importNode","checkboxes","char","li","join","setContent","openRestoreForm","closeClear","altDownload","data","p","text","getCloseButton","select","emailDownload","url","href","saveCharacter","newCharacter","reset","loadCharClick","charKey","currentTarget","window","location","hash","openLoadModal","currentlyUnsaved","unsavedDialog","list","cButton","$8caf4d1fd832f06a$export$2e2bcd8739ae039","confirmCallback","closeLoadModal","openDeleteModal","modal","items","contains","currentBtn","newIndex","buttons","btn","initialize","querySelectorAll","prototype","call","toggle","find","on","$5ead180972af1116$export$2e2bcd8739ae039","shortcuts","checkShortCuts","addShortCut","event","getKeyCode","withControl","withShift","code","stopPropagation","$64ad83fb4b119f10$export$2e2bcd8739ae039","tablist","tabs","panes","parentNode","tab","changeTab","switchToPane","paneId","findIndex","oldTab","click","oldIndex","newTab","oldPane","newPane","$7dd0009da500f005$export$2e2bcd8739ae039","cur_character","renderCharacter","targetPane","mainTabs","f","subf","charValue","Event","dispatchEvent","listItems","item","addItem","noteItems","rowItems","addRow","skillValue","skillMod","attributeScore","saveProficiency","updateSkillMod","modifier","updateProficiency","skillName","attributeName","updateAttributeMods","updateSaveMods","numberInputChange","field","name","subfield","spellList","dialog_unsaved","dialog_undo","triggerNewCharacter","changeCharacter","urlhash","loadCharacter","hideUnsavedDialog","$c761d758defe0b40$export$f7000455d08e5b0a","sheetView","alert","downloadBackup","names","ch","format","date","body","encodeURIComponent","toLocaleString","Blob","file","type","URL","createObjectURL","download","getFullYear","getMonth","getDate","setTimeout","files","input_file","reader","FileReader","onload","theFile","restoreCharacters","result","input","start","end","lastIndexOf","check","substring","trim","backups","imported_chars","existingCharacter","temp_key","$c761d758defe0b40$export$e763fab48ccd09a6","textContent","ul","deleteCharacterTemp","timeoutIndicator","deleteCharacter","$c761d758defe0b40$export$dd7b7f0a1b10377e","undoDelete","clearTimeout","showIntroDialog","showUnsavedDialog","handleFieldChange","detail","currentVal","sameValues","handleAttributeChange","handleSaveChange","settings","$c761d758defe0b40$export$3e7fb026ea4b21f9","shortCuts","link","target_id","scrollIntoView","div","restoreFormSubmit","$2548e0afbc3a4d26$var$template","hasAttribute","_keyPress","$b2b46ab6d4b7aae1$var$template","_upgradeProperty","_blur","hasOwnProperty","fieldName","contentArray","array","$2548e0afbc3a4d26$export$2e2bcd8739ae039","lastElementChild","newItem","nextItem","nextElementSibling","CustomEvent","bubbles","$55f573cb0af2d49c$var$template","$55f573cb0af2d49c$var$SimpleList","subFieldName","removeChild","$89d72274b122b939$var$template","columnNames","headRow","th","entries","row","cells","rowData","cell","filter","columns","newCell","td","$8b2cdd67db07fe95$var$template","profCheck","_checkSkills","expertCheck","_checkExpert","val","val1","val2","disabled","mod","getRootNode","expert","$fec072a4ea8ab376$var$template","$fec072a4ea8ab376$var$AttributeListing","connectedCallback","saveCheck","_checkSave","scoreInput","_scoreUpdate","$1fd0846ce2641b3a$var$template","placeholderText","$f29cd6c67ea13581$export$bdfd709ae4826697","$f29cd6c67ea13581$var$bundleURL","$f29cd6c67ea13581$var$getBaseURL","err","matches","stack","$f29cd6c67ea13581$var$getBundleURL","$8ee21db787df3c9c$exports","getBundleURL","resolve","navigator","serviceWorker","$7b95a93d85ab9a01$var$emitter","events","debug","listenerIndex","listener","event1","listener1","boundObj","index","splice","off","event2","listener2","once","event3","listener3","boundObj1","wrap","binder","apply","arguments","event4","args","listenObj","$a732fdf9da71c8ac$export$2e2bcd8739ae039","$02391ac45b9a0199$export$2e2bcd8739ae039"],"version":3,"file":"index.4f3b95c5.js.map"}