{
  "version": 3,
  "sources": ["../src/service_worker.js"],
  "sourcesContent": ["/**\n * Service worker for character sheet app\n */\nimport { version } from '../package.json';\n/**\n * Config data\n * Update cacheName when we want to make sure to get new data in the cache\n * Caching all the files we use except the service worker itself\n */\nconst config = {\n    cacheName: version,\n    staticCacheItems: [\n        '/index.html',\n        '/index.js',\n        '/styles.css',\n        '/'\n    ]\n};\n\n/**\n * Event: install\n * precaches all the files we use in the app\n */\nself.addEventListener('install', (e) => {\n    function onInstall () {\n        return caches.open(config.cacheName)\n            .then(cache => cache.addAll(config.staticCacheItems));\n    }\n    e.waitUntil(\n        onInstall(e)\n            .then(() => self.skipWaiting())\n    );\n});\n/**\n * Event: activate\n * This clears out any old caches\n */\nself.addEventListener('activate', function (event) {\n    const cacheWhitelist = [config.cacheName];\n\n    event.waitUntil(\n        caches.keys().then(function (cacheNames) {\n            return Promise.all(\n                cacheNames.map(function (cacheName) {\n                    if (cacheWhitelist.indexOf(cacheName) === -1) {\n                        return caches.delete(cacheName);\n                    }\n                    return undefined;\n                })\n            );\n        })\n            .then(() => self.clients.claim())\n    );\n});\n/**\n * Event: fetch\n * Just fetches from the cache if it can, since the whole app is static\n * @param {FetchEvent} event\n */\nself.addEventListener('fetch', (event) => {\n    // Ignore POSTs (mostly to external DBs, etc.)\n    if (event.request.method === 'POST') {\n        fetch(event.request);\n        return;\n    }\n    event.respondWith(\n        caches.match(event.request)\n            .then(function (resp) {\n                return resp || fetch(event.request)\n                    .then(function (response) {\n                        return caches.open(config.cacheName)\n                            .then(function (cache) {\n                                cache.put(event.request, response.clone());\n                                return response;\n                            });\n                    });\n            }).catch(function (e) {\n                console.log('Service worker fetch failed.');\n            })\n    );\n});\n"],
  "mappings": "oBASA,GAAM,GAAS,CACX,UAAW,EACX,iBAAkB,CACd,cACA,YACA,cACA,GACJ,CACJ,EAMA,KAAK,iBAAiB,UAAW,AAAC,GAAM,CACpC,YAAsB,CAClB,MAAO,QAAO,KAAK,EAAO,SAAS,EAC9B,KAAK,GAAS,EAAM,OAAO,EAAO,gBAAgB,CAAC,CAC5D,CACA,EAAE,UACE,EAAU,CAAC,EACN,KAAK,IAAM,KAAK,YAAY,CAAC,CACtC,CACJ,CAAC,EAKD,KAAK,iBAAiB,WAAY,SAAU,EAAO,CAC/C,GAAM,GAAiB,CAAC,EAAO,SAAS,EAExC,EAAM,UACF,OAAO,KAAK,EAAE,KAAK,SAAU,EAAY,CACrC,MAAO,SAAQ,IACX,EAAW,IAAI,SAAU,EAAW,CAChC,GAAI,EAAe,QAAQ,CAAS,IAAM,GACtC,MAAO,QAAO,OAAO,CAAS,CAGtC,CAAC,CACL,CACJ,CAAC,EACI,KAAK,IAAM,KAAK,QAAQ,MAAM,CAAC,CACxC,CACJ,CAAC,EAMD,KAAK,iBAAiB,QAAS,AAAC,GAAU,CAEtC,GAAI,EAAM,QAAQ,SAAW,OAAQ,CACjC,MAAM,EAAM,OAAO,EACnB,MACJ,CACA,EAAM,YACF,OAAO,MAAM,EAAM,OAAO,EACrB,KAAK,SAAU,EAAM,CAClB,MAAO,IAAQ,MAAM,EAAM,OAAO,EAC7B,KAAK,SAAU,EAAU,CACtB,MAAO,QAAO,KAAK,EAAO,SAAS,EAC9B,KAAK,SAAU,EAAO,CACnB,SAAM,IAAI,EAAM,QAAS,EAAS,MAAM,CAAC,EAClC,CACX,CAAC,CACT,CAAC,CACT,CAAC,EAAE,MAAM,SAAU,EAAG,CAClB,QAAQ,IAAI,8BAA8B,CAC9C,CAAC,CACT,CACJ,CAAC",
  "names": []
}
